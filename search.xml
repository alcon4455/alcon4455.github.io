<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>me</title>
      <link href="2020/11/01/hello-world/"/>
      <url>2020/11/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1604738808983&di=6c7658cf14666c17a4ed5aada60cdc6d&imgtype=0&src=http://c-ssl.duitang.com/uploads/item/201911/12/20191112221928_vNLCh.thumb.700_0.jpeg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> me </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试题</title>
      <link href="2020/11/01/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2020/11/01/java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-面向对象都有哪些特性以及你对这些特性的理解"><a href="#1-面向对象都有哪些特性以及你对这些特性的理解" class="headerlink" title="1.面向对象都有哪些特性以及你对这些特性的理解"></a>1.面向对象都有哪些特性以及你对这些特性的理解</h2><p> 封装、继承、多态</p><h2 id="2-访问权限修饰符public、private、protected-以及不写（默认）时的区别"><a href="#2-访问权限修饰符public、private、protected-以及不写（默认）时的区别" class="headerlink" title="2.访问权限修饰符public、private、protected, 以及不写（默认）时的区别"></a>2.访问权限修饰符public、private、protected, 以及不写（默认）时的区别</h2><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同胞</th><th align="center">子类</th><th align="center">其他包</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">default</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h2 id="3-重载（overload）和重写（override）的区别？重载的方法能否根据返回类型进行区分？"><a href="#3-重载（overload）和重写（override）的区别？重载的方法能否根据返回类型进行区分？" class="headerlink" title="3.重载（overload）和重写（override）的区别？重载的方法能否根据返回类型进行区分？"></a>3.重载（overload）和重写（override）的区别？重载的方法能否根据返回类型进行区分？</h2><p>​        方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p><p>​        重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</p><p>​        重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求。</p><h2 id="4-抽象类-abstract-class-和接口-interface-有什么异同？"><a href="#4-抽象类-abstract-class-和接口-interface-有什么异同？" class="headerlink" title="4.抽象类(abstract class)和接口(interface)有什么异同？"></a>4.抽象类(abstract class)和接口(interface)有什么异同？</h2><p>不同： </p><p>抽象类： </p><p>1.抽象类中可以定义构造器 </p><p>2.可以有抽象方法和具体方法 </p><p>3.接口中的成员全都是public的 </p><p>4.抽象类中可以定义成员变量 </p><p>5.有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法 </p><p>6.抽象类中可以包含静态方法</p><h2 id="5-阐述静态变量和实例变量的区别？"><a href="#5-阐述静态变量和实例变量的区别？" class="headerlink" title="5.阐述静态变量和实例变量的区别？"></a>5.阐述静态变量和实例变量的区别？</h2><p>静态变量: 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝； </p><p>实例变量: 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p><h2 id="6-和equals的区别？"><a href="#6-和equals的区别？" class="headerlink" title="6.==和equals的区别？"></a>6.==和equals的区别？</h2><p>equals和== 最大的区别是一个是方法一个是运算符。 </p><p>==：如果比较的对象是基本数据类型，则比较的是数值是否相等；如果比较的是引用数据类型，则比较的是对象的地址值是否相等。 </p><p>equals()：用来比较方法中两个对象的内容是否相等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="2020/11/01/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>2020/11/01/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>原文链接：<a href="http://dwz.date/deXD">http://dwz.date/deXD</a></p><p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://markdown.tw/">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="https://github.com/appinncom/Markdown-Syntax-CN/blob/master/syntax.md">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">查看这里</a> 。」–By @<a href="https://twitter.com/riku">riku</a></p><p><strong>注：</strong> 本项目托管于 <a href="https://github.com/appinncom/Markdown-Syntax-CN">Github</a>，由<a href="https://www.appinn.com/">小众软件</a>重构。</p><h1 id="Markdown-语法说明-简体中文版"><a href="#Markdown-语法说明-简体中文版" class="headerlink" title="Markdown 语法说明 (简体中文版)"></a>Markdown 语法说明 (简体中文版)</h1><p>快速入门：(<a href="https://www.appinn.com/markdown/basic.html">点击查看快速入门</a>)</p><p><a href="https://www.appinn.com/markdown/#markdown-%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E7%89%88">Markdown 语法说明 (简体中文版)</a><a href="https://www.appinn.com/markdown/#%E6%A6%82%E8%BF%B0">概述</a><a href="https://www.appinn.com/markdown/#%E5%AE%97%E6%97%A8">宗旨</a><a href="https://www.appinn.com/markdown/#%E5%85%BC%E5%AE%B9-html">兼容 HTML</a><a href="https://www.appinn.com/markdown/#%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2">特殊字符自动转换</a><a href="https://www.appinn.com/markdown/#%E5%8C%BA%E5%9D%97%E5%85%83%E7%B4%A0">区块元素</a><a href="https://www.appinn.com/markdown/#%E6%AE%B5%E8%90%BD%E5%92%8C%E6%8D%A2%E8%A1%8C">段落和换行</a><a href="https://www.appinn.com/markdown/#%E6%A0%87%E9%A2%98">标题</a><a href="https://www.appinn.com/markdown/#%E5%8C%BA%E5%9D%97%E5%BC%95%E7%94%A8-blockquotes">区块引用 Blockquotes</a><a href="https://www.appinn.com/markdown/#%E5%88%97%E8%A1%A8">列表</a><a href="https://www.appinn.com/markdown/#%E4%BB%A3%E7%A0%81%E5%8C%BA%E5%9D%97">代码区块</a><a href="https://www.appinn.com/markdown/#%E5%88%86%E9%9A%94%E7%BA%BF">分隔线</a><a href="https://www.appinn.com/markdown/#%E5%8C%BA%E6%AE%B5%E5%85%83%E7%B4%A0">区段元素</a><a href="https://www.appinn.com/markdown/#%E9%93%BE%E6%8E%A5">链接</a><a href="https://www.appinn.com/markdown/#%E5%BC%BA%E8%B0%83">强调</a><a href="https://www.appinn.com/markdown/#%E4%BB%A3%E7%A0%81">代码</a><a href="https://www.appinn.com/markdown/#%E5%9B%BE%E7%89%87">图片</a><a href="https://www.appinn.com/markdown/#%E5%85%B6%E5%AE%83">其它</a><a href="https://www.appinn.com/markdown/#%E8%87%AA%E5%8A%A8%E9%93%BE%E6%8E%A5">自动链接</a><a href="https://www.appinn.com/markdown/#%E5%8F%8D%E6%96%9C%E6%9D%A0">反斜杠</a><a href="https://www.appinn.com/markdown/#%E6%84%9F%E8%B0%A2">感谢</a><a href="https://www.appinn.com/markdown/#%E9%93%BE%E6%8E%A5-n3560">链接</a></p><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/">atx</a>、<a href="http://textism.com/tools/textile/">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <code>、</code>、<code>、</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 `` 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><pre><code>这是一个普通段落。&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>、</code>、<code>~~</code>~~ 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>或</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&lt;</code> 和 <code>&amp;</code>。</p><p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必须要把网址转换写为：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p><p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><pre><code>&amp;copy;</code></pre><p>Markdown 会保留它不动。而若你写：</p><pre><code>AT&amp;T</code></pre><p>Markdown 就会将它转为：</p><pre><code>AT&amp;amp;T</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="https://www.appinn.com/markdown/#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><pre><code>4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p><pre><code>4 &amp;lt; 5</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><hr><h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 ``标签。</p><p>如果你<em>确实</em>想要依赖 Markdown 来插入 ``标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code>，但是简单地「每个换行都转换为</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="https://www.appinn.com/markdown/#blockquote">区块引用</a> 和多段落的 <a href="https://www.appinn.com/markdown/#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a> 和类 <a href="http://www.aaronsw.com/2002/atx/">atx</a> 形式。</p><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p><pre><code># 这是 H1## 这是 H2###### 这是 H6</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><pre><code># 这是 H1 ### 这是 H2 ##### 这是 H3 ######</code></pre><h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code>：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><pre><code>&gt; ## 这是一个标题。&gt; &gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>*   Red*   Green*   Blue</code></pre><p>等同于：</p><pre><code>+   Red+   Green+   Blue</code></pre><p>也等同于：</p><pre><code>-   Red-   Green-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><pre><code>&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你的列表标记写成：</p><pre><code>1.  Bird1.  McHale1.  Parish</code></pre><p>或甚至是：</p><pre><code>3. Bird1. McHale8. Parish</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,    viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你懒，那也行：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 `` 标签包起来，举例来说：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt;</code></pre><p>但是这个：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><pre><code>*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p><pre><code>*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p><pre><code>*   一列表项包含一个列表区块：        &lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><pre><code>1986. What a great season.</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p><pre><code>1986\. What a great season.</code></pre><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>和</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><pre><code>这是一个普通段落：    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><pre><code>Here is an example of AppleScript:    tell application &quot;Foo&quot;        beep    end tell</code></pre><p>会被转换为：</p><pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;    beepend tell&lt;/code&gt;&lt;/pre&gt;</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><pre><code>    &lt;div class=&quot;footer&quot;&gt;        &amp;copy; 2004 Foo Corporation    &lt;/div&gt;</code></pre><p>会被转换为：</p><pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;    &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><hr><h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt;</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><pre><code>See my [About](/about/) page for details.</code></pre><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><pre><code>This is [an example][id] reference-style link.</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p><pre><code>This is [an example] [id] reference-style link.</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;[foo]: http://example.com/  &#39;Optional Title Here&#39;[foo]: http://example.com/  (Optional Title Here)</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用方括号包起来：</p><pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><pre><code>[id]: http://example.com/longish/path/to/resource/here    &quot;Optional Title Here&quot;</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p><pre><code>[link text][a][link text][A]</code></pre><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><pre><code>[Google][]</code></pre><p>然后定义链接内容：</p><pre><code>[Google]: http://google.com/</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然后接着定义链接：</p><pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><pre><code>I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].  [1]: http://google.com/        &quot;Google&quot;  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;  [3]: http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>如果改成用链接名称的方式写：</p><pre><code>I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google]: http://google.com/        &quot;Google&quot;  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>上面两种写法都会产生下面的 HTML。</p><pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>标签包围，用两个</code>*<code>或</code>_<code>包起来的话，则会被转成</code>，例如：</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>会转成：</p><pre><code>&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><pre><code>un*frigging*believable</code></pre><p>但是<strong>如果你的 <code>\*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><pre><code>\*this text is surrounded by literal asterisks\*</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（```），例如：</p><pre><code>Use the `printf()` function.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p><pre><code>``There is a literal backtick (`) here.``</code></pre><p>这段语法会产生：</p><pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p><pre><code>A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会产生：</p><pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在代码区段内，<code>&amp;</code> 和方括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p><pre><code>Please don&#39;t use any `&lt;blink&gt;` tags.</code></pre><p>转为：</p><pre><code>&lt;p&gt;Please don&#39;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以这样写：</p><pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以产生：</p><pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encodedequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p><p>行内式的图片语法看起来像是：</p><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>详细叙述如下：</p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li></ul><p>参考式的图片语法则长得像这样：</p><pre><code>![Alt text][id]</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p><pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `` 标签。</p><hr><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown 会转为：</p><pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p><pre><code>&lt;address@example.com&gt;</code></pre><p>Markdown 会转成：</p><pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre><p>在浏览器里面，这段字串（其实是 <code>[address@example.com](mailto:address@example.com)</code>）会变成一个可以点击的「<a href="mailto:address@example.com">address@example.com</a>」链接。</p><p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `` 标签），你可以在星号的前面加上反斜杠：</p><pre><code>\*literal asterisks\*</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   底线&#123;&#125;  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java关键字</title>
      <link href="2020/11/01/java%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>2020/11/01/java%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是关键字？"><a href="#一、什么是关键字？" class="headerlink" title="一、什么是关键字？"></a><strong>一、什么是关键字？</strong></h1><p><strong>关键字是java语言中一些被赋予特定意义的一些单词，不可以把它当做标识符来使用。</strong></p><p><strong>在java中有\</strong>两个特殊的关键字goto、const，*<em>我们称这两个关键字为*</em>保留字。****</p><h1 id="二、java中有哪些关键字？"><a href="#二、java中有哪些关键字？" class="headerlink" title="二、java中有哪些关键字？"></a><strong>二、java中有哪些关键字？</strong></h1><h2 id="总表：java关键字共53个（其中包含两个保留字const，goto）"><a href="#总表：java关键字共53个（其中包含两个保留字const，goto）" class="headerlink" title="总表：java关键字共53个（其中包含两个保留字const，goto）"></a>总表：java关键字共53个（其中包含两个保留字const，goto）</h2><table><thead><tr><th><a href="https://baike.baidu.com/item/abstract">abstract</a></th><th><a href="https://baike.baidu.com/item/assert">assert</a></th><th><a href="https://baike.baidu.com/item/boolean">boolean</a></th><th>break</th><th><a href="https://baike.baidu.com/item/byte">byte</a></th></tr></thead><tbody><tr><td>case</td><td><a href="https://baike.baidu.com/item/catch">catch</a></td><td><a href="https://baike.baidu.com/item/char">char</a></td><td><a href="https://baike.baidu.com/item/class">class</a></td><td>const</td></tr><tr><td>continue</td><td><a href="https://baike.baidu.com/item/default">default</a></td><td><a href="https://baike.baidu.com/item/do">do</a></td><td><a href="https://baike.baidu.com/item/double">double</a></td><td><a href="https://baike.baidu.com/item/else">else</a></td></tr><tr><td><a href="https://baike.baidu.com/item/enum">enum</a></td><td><a href="https://baike.baidu.com/item/extends">extends</a></td><td><a href="https://baike.baidu.com/item/final">final</a></td><td><a href="https://baike.baidu.com/item/finally">finally</a></td><td>float</td></tr><tr><td><a href="https://baike.baidu.com/item/for">for</a></td><td>goto</td><td><a href="https://baike.baidu.com/item/if">if</a></td><td><a href="https://baike.baidu.com/item/implements">implements</a></td><td><a href="https://baike.baidu.com/item/import">import</a></td></tr><tr><td><a href="https://baike.baidu.com/item/instanceof">instanceof</a></td><td><a href="https://baike.baidu.com/item/int">int</a></td><td><a href="https://baike.baidu.com/item/interface">interface</a></td><td>long</td><td>native</td></tr><tr><td>new</td><td><a href="https://baike.baidu.com/item/package">package</a></td><td><a href="https://baike.baidu.com/item/private">private</a></td><td><a href="https://baike.baidu.com/item/protected">protected</a></td><td><a href="https://baike.baidu.com/item/public">public</a></td></tr><tr><td><a href="https://baike.baidu.com/item/return">return</a></td><td><a href="https://baike.baidu.com/item/strictfp">strictfp</a></td><td><a href="https://baike.baidu.com/item/short">short</a></td><td><a href="https://baike.baidu.com/item/static">static</a></td><td><a href="https://baike.baidu.com/item/super">super</a></td></tr><tr><td><a href="https://baike.baidu.com/item/switch">switch</a></td><td><a href="https://baike.baidu.com/item/synchronized">synchronized</a></td><td><a href="https://baike.baidu.com/item/this">this</a></td><td><a href="https://baike.baidu.com/item/throw">throw</a></td><td><a href="https://baike.baidu.com/item/throws">throws</a></td></tr><tr><td><a href="https://baike.baidu.com/item/transient">transient</a></td><td>try</td><td><a href="https://baike.baidu.com/item/void">void</a></td><td><a href="https://baike.baidu.com/item/volatile">volatile</a></td><td><a href="https://baike.baidu.com/item/while">while</a></td></tr><tr><td>true</td><td>false</td><td>null</td><td></td><td></td></tr></tbody></table><p>　另外，Java还有3个<a href="https://baike.baidu.com/item/%E4%BF%9D%E7%95%99%E5%AD%97/7674788">保留字</a>:true、false、null。它们不是关键字，而是文字。包含Java定义的值。和关键字一样,它们也不可以作为<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AF%86%E7%AC%A6/7105638">标识符</a>使用。参考<a href="https://baike.baidu.com/item/java%E5%85%B3%E9%94%AE%E5%AD%97/5808816?fr=aladdin#3_43">https://baike.baidu.com/item/java%E5%85%B3%E9%94%AE%E5%AD%97/5808816?fr=aladdin#3_43</a></p><h1 id="二）大致含义"><a href="#二）大致含义" class="headerlink" title="二）大致含义"></a><strong>二）大致含义</strong></h1><table><thead><tr><th><strong>关键字</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循[IEEE 754](<a href="https://baike.baidu.com/item/IEEE">https://baike.baidu.com/item/IEEE</a> 754)算术规范 [1]</td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>while</td><td>用在循环结构中</td></tr></tbody></table><h3 id="1-什么是访问修饰符？"><a href="#1-什么是访问修饰符？" class="headerlink" title="1.什么是访问修饰符？"></a>1.什么是访问修饰符？</h3><p>java通过修饰符来控制类、属性和方法的访问权限和其他功能，一般放再java语句的最前端。</p><h3 id="2-访问修饰符的访问权限的范围"><a href="#2-访问修饰符的访问权限的范围" class="headerlink" title="2.访问修饰符的访问权限的范围"></a>2.访问修饰符的访问权限的范围</h3><table><thead><tr><th>修饰符</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>共有的，对所有类可见。</td></tr><tr><td>protected</td><td>受保护的，对同一包内的类和所有子类可见。</td></tr><tr><td>默认的</td><td>在同一包中可见，默认不使用任何修饰符。</td></tr><tr><td>private</td><td>私有的，在同一类可见，也就是在同一类中可访问。</td></tr></tbody></table><p>从上述表格可以看出从public、protected、默认的、private的访问权限范围依次减少。</p><p><strong>class：定义类的关键字。</strong></p><p><strong>interface：定义接口的关键字。</strong></p><p><strong>abstract ：定义抽象类或者抽象方法的关键字。</strong></p><p><strong>enum：定义枚举的关键字。</strong></p><p><strong>extends：继承类或者继承接口的关键字。</strong></p><p><strong>implements：实现接口的关键字。</strong></p><p><strong>new：实例化对象的关键字。</strong></p><p><strong>void：数据类型的关键字。</strong></p><p><strong>byte、short、int、long：整型数据的关键字 是指十进制类型的</strong></p><h3 id="整数数据类型"><a href="#整数数据类型" class="headerlink" title="整数数据类型:"></a><strong>整数数据类型:</strong></h3><table><thead><tr><th>数据类型</th><th>内存空间（8位等于一个字节）</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>8位</td><td>-2^7~2^7-1</td></tr><tr><td>short</td><td>16位</td><td>-2^15~2^15-1</td></tr><tr><td>int</td><td>32位</td><td>-2^31~2^31-1</td></tr><tr><td>long</td><td>64位</td><td>-2^63~2^63-1</td></tr></tbody></table><p><strong>float、double是指浮点型数据的关键字。</strong></p><h3 id="浮点型类型数据："><a href="#浮点型类型数据：" class="headerlink" title="浮点型类型数据："></a><strong>浮点型类型数据：</strong></h3><table><thead><tr><th>数据类型</th><th>内存空间</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>32位</td><td>1.4E-45~3.4028235E38</td></tr><tr><td>double</td><td>64位</td><td>4.9E-324~1.7976931348623157E308</td></tr></tbody></table><p><strong>在默认的情况下，小数被看做是double型，若使用float型的小数，则需要在小数后面加上f或者F。若是double型数据，可以在小数后面加d或者D，不加d也不会出错</strong>。</p><p><strong>char:字符的关键字    16位    范围是0~65535</strong></p><p><strong>boolean：布尔类型的关键字  它的值有true和false</strong></p><h3 id="this关键字："><a href="#this关键字：" class="headerlink" title="this关键字："></a><strong>this关键字：</strong></h3><p><strong>this关键字用来表示当前对象本身，或者当前类的一个实例化对象，通过this可以调用对象的所有属性和方法。静态方法中不能使用this关键字。</strong></p><p><strong>this关键字的三个用法：</strong></p><p><strong>1.通过this关键字可以明确地去访问一个类的成员变量和成员方法，解决与局部变量名的冲突。</strong></p><p><strong>2.this关键字调用构造方法：构造方法是在实例化对象时java虚拟机自动调用的，不能像调用普通方法那样去调用，可以通过this（参数1，参数2…..）的型式调用其他的构造方法。</strong></p><p><strong>使用this关键字调用构造方法时需要\</strong>注意**的是：**</p><p>*<strong>只能在构造方法中使用this调用其他构造方法，**</strong>不能在对象的成员方法中使用this调用构造方法**</p><p>*<strong>在构造方法中，用this调用构造方法的语句**</strong>必须放在第一位，并且写一次。**</p><p>*<strong>不能再**</strong>一个类的两个方法中使用this相互调用**<strong>，不然会报错。</strong></p><p><strong>3.this还可以表示当前对象，也就是哪个对象在调用this所在的方法，那么此时this就是代表着这个对象。</strong></p><h3 id="super关键字："><a href="#super关键字：" class="headerlink" title="super关键字："></a><strong>super关键字：</strong></h3><p><strong>super关键字代表父类对象，主要用于指定父类的属性和方法，也用于在子类中初始化父类。子类的静态方法中不能使用super关键字。</strong></p><p><strong>那么为什么super不能用于子类的静态方法中呢？</strong></p><p><strong>原因是super指代的是父类的一个对象，它需要在运行的时候才会被创建，二静态方法是指类方法，当类加载的时候，静态方法就已经存在，但是父类对象还没有被初始化。</strong></p><p><strong>super关键字的用法:</strong></p><ul><li><strong>使用super关键字可以在子类中调用父类的属性和方法，当子类和父类拥有相同的属性和方法时，此时如果你想调用父类的属性和方法，那么就必须使用super关键字，如果不使用的话，父类的方法和属性就会被子类覆盖。</strong></li><li><strong>子类是父类的派生类，它的实例化依赖于父类的实例化。所以它的任何一个构造函数都必须要初始化父类，Java就是super关键字调用父类构造方法，来完成这个操作。如果在父类没有无参构造方法，那么在子类中必须显示调用super来调用已有的有参构造函数来初始化父类。</strong></li></ul><p>下面是一个关于构造方法的例子：<strong>讲的是如果在父类没有无参构造方法，那么在子类中必须显示调用super来调用已有的有参构造函数来初始化父类。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> String name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Demo1</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在运动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在休息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token keyword">extends</span> <span class="token class-name">Demo1</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Demo2</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="异常的关键字："><a href="#异常的关键字：" class="headerlink" title="异常的关键字："></a>异常的关键字：</h3><p><strong>try：用来检测语句块中是否有异常    try{}</strong></p><p><strong>catch：用来捕获异常，然后进行处理  catch(异常类型){}</strong></p><p><strong>如果在try-catch语句进行异常处理，当try代码块中的语句发生了异常，程序就会调转到catch代码中执行，执行完catch代码块中的程序代码后，将继续执行catch代码后的其它代码，而不会执行try代码块中发生异常语句后面的代码。由此可知，java的异常处理机制是结构化的，不会因为一个异常影响整个程序的执行。</strong></p><p><strong>finally：不管是否发生异常，都会执行的语句块    finally{}</strong></p><p><strong>注意，在以下四种特殊情况下finally语句块不会执行：</strong></p><p>​    1.    <strong>在finally语句块中发生了异常；</strong></p><p>​    2.    <strong>在前面的代码中使用了System.exit()退出程序；</strong></p><p>​    3.    <strong>程序所在的线程死亡；</strong></p><p>​    4.    <strong>关闭cpu；</strong></p><p><strong>volatile：数据同步。</strong></p><p><strong>synchronized:同步可以用来同步方法、同步代码块</strong></p><p><strong>循环的关键字： for 、while、do、break、continue</strong></p><p><strong>接下来主要讲讲break和continue关键字：</strong></p><p><strong>break关键字和continue关键字是用来控制循环的跳转的；</strong></p><p><strong>break语句可以用来跳出switch结构。在循环结构中，同样可以用break语句跳出当前循环体，从而中断循环。<br>1.break跳出循环。下面是实例代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果为：</p><p><img src="https://img-blog.csdnimg.cn/20181122125318975.png" alt="img"></p><p><strong>2. 在内层嵌套循环中使用break跳出内层循环。下面是实例代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"  j="</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果：</p><p><img src="https://img-blog.csdnimg.cn/20181122130002268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVyMTUwODA2,size_16,color_FFFFFF,t_70" alt="img"></p><p> <strong>continue语句是对break语句的补充。continue不是立即跳出循环体，而是指跳出本次循环结束前的语句，回到循环的条件测试部分，重新开始执行。</strong></p><p><strong>下面试一个实例，输出1~10之间的奇数，使用continue跳出循环。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//如果i为偶数，跳到下一循环</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出i的值</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果：</p><p><img src="https://img-blog.csdnimg.cn/20181122130939610.png" alt="img"></p><p> <strong>使用break 标签名可以跳出指定的循环体，此循环体的标签名必须与break标签名一直。这个循环可以是内循环也可以是外循环。</strong></p><p><strong>语法如下：</strong></p><p><strong>标签名：循环体{</strong> </p><p><strong>break 标签名；</strong></p><p><strong>}</strong></p><p><strong>下面是带有标签的break跳出外层循环的实例。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Loop<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//for循环前用标签标记</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果j等于3就结束外层循环，跳出Loop标签的循环体</span>                <span class="token keyword">break</span> Loop<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果：</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20181122131834281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVyMTUwODA2,size_16,color_FFFFFF,t_70" alt="img"></h3><p> <strong>与break语句一样，continue也支持标签功能。语法如下：<br>标签名：循环体{</strong></p><p>​     <strong>continue 标签名；</strong></p><p><strong>}</strong></p><p><strong>标签名：可以说任意标识符； 循环体：任意循环语句； continue标签名：continue跳出指定的循环体，此循环体的标签名必须与continue的标签名一致；</strong></p><p><strong>条件关键字：if、else、switch、case、default</strong></p><p><strong>return：返回结果的关键字；</strong></p><p><strong>package：定义包的关键字；</strong></p><p><strong>native：调用C或者C++的代码；</strong></p><p><strong>assert：断言；</strong></p><p><strong>transient：瞬时的  IO流的对象流</strong></p><h3 id="instanceof关键字："><a href="#instanceof关键字：" class="headerlink" title="instanceof关键字："></a><strong>instanceof关键字：</strong></h3><p><strong>java中，instanceof运算符的前一个操作符是一个引用变量，后一个操作数通常是一个类（可以是接口），用于判断前面的对象是否是后面的类，或者其子类、实现类的实例。如果是返回true，否则返回false。</strong></p><p><strong>也就是说：使用instanceof关键字做判断时， instanceof 操作符的左右操作数必须有继承或实现关系<br>例如a是A类的一个实例对象，那么   a instanceof  A ； 则会返回一个true的布尔值。</strong></p><h3 id="static关键字："><a href="#static关键字：" class="headerlink" title="static关键字："></a><strong>static关键字：</strong></h3><p><strong>由static修饰的变量、常量、和方法称作静态变量、常量、方法；</strong></p><p><strong>有时候在处理问题时会需要两个类或者多个类在一个内存空间区域共享一个数据。那么在此时需要将它定义为静态的数据；</strong></p><p><strong>被声明为static的变量、常量和方法被称为静态成员。静态成员属于类所有，区别于个别的对象，可以在本类或其他类使用类名和其他类名和“.”运算符调用静态成员。</strong></p><p><strong>static的主要作用：为特定数据类型或对象分配单一的存贮空间，而与创建对象的个数无关。或者把某个方法或属性与类而不是对象关联在一起。</strong></p><p><strong>static的使用：参考：</strong><a href="https://blog.csdn.net/chaoshenzhaoxichao/article/details/80402768">https://blog.csdn.net/chaoshenzhaoxichao/article/details/80402768</a></p><p><strong>1.可以用来修饰常量；</strong></p><p><strong>2.可以用来修饰成员变量，通过static关键字来达到全局的效果。静态变量 属于类，在内存中只有一个副本。只要静态变量所在的类被加载，这个静态类就会被分配空间，因此就可以被使用。对静态变量的引用有两种方式，分别为“类.静态变量”和“对象.静态变量”。实例变量属于对象，只有对象被创建后，实例变量才会被分配空间，才能被使用，他在内存中存在多个副本，只能用“对象.静态变量”的方式来引用。静态变量只有一个，被类所拥有，所有的对象都共享这个静态变量。</strong></p><p><strong>3.可以用来修饰成员方法，static方法是属于类的方法</strong>，<strong>不需要创建对象就可以被使用，而非static方法是对象的方法，只有对象被创建出来后才可以被使用。static方法中不能使用this和super关键字，不能调用非静态方法，只能访问静态的成员变量和方法。static谁能实现单例模式，单例模式的特点是该类只有一个实例。</strong></p><p><strong>4</strong>.<strong>static可以用来修饰代码块，static代码块在类中是独立与成员变量和成员函数的代码块，他不在任何一个方法体内，JVM在加载里的时候会执行static代码块，如果有多个static代码块，JVM将会按顺序来执行，static代码块经常会被用来初始化静态变量，需要注意的是static代码块只会被执行一次。</strong></p><p><strong>5.static可以用来修饰内部类，static内部类是指被申明为static的内部类，他可以不依赖于外部类实例对象而被实例化，而通常的内部类需要外部类实例化后才能实例化。静态内部类不能与外部类有相同的名字，不能访问外部类的普通成员变量，只能访问外部类中的静态成员和静态成员方法，只有内部类才能被申明为static。</strong></p><h3 id="final关键字："><a href="#final关键字：" class="headerlink" title="final关键字："></a><strong>final关键字：</strong></h3><p><strong>final表示最终的，final可以用来修饰普通方法、属性、变量、形参、常量、类、内部类。</strong></p><p><strong>如果修饰普通方法，表示该方法不能被重写；</strong></p><p><strong>如果修饰属性、变量、形参，表示值不能改变；</strong></p><p><strong>如果修饰类，表示类不能被继承。</strong></p><p><strong>属性、变量、形参、常量的名字中的存储的内容是不能改变的</strong></p><h3 id="JAVA的保留关键字（2个）"><a href="#JAVA的保留关键字（2个）" class="headerlink" title="JAVA的保留关键字（2个）"></a>JAVA的保留关键字（2个）</h3><p>   const——常量，常数：用于修改字段或局部变量的声明。</p><p>   goto——转到：指定跳转到标签，找到标签后，程序将处理从下一行开始的命令</p><h3 id="修饰方法、类、属性和变量（9个）"><a href="#修饰方法、类、属性和变量（9个）" class="headerlink" title="修饰方法、类、属性和变量（9个）"></a>修饰方法、类、属性和变量（9个）</h3><p>  static(静态的)：属性和方法都可以用static修饰，直接使用类名、属性和方法名。只有内部类可以使用static关键字修饰，调用直接使用类名、内部类类名进行调用。static可以独立存在</p><p>  final(最终的不可被改变)：方法和类都可用final来修饰；final修饰的类是不能被继承的；final修饰的方法是不能被子类重写。常量的定义：final修饰的属性就是常量</p><p>  super(调用父类的方法)：常见public void paint(Graphics g){super.paint(g);…}</p><p>  this(当前类的父类的对象)：调用当前类中的方法（表示调用这个方法的对象）this.addActionListener(al):等等</p><p>  native(本地)</p><p>  strictfp(严格，精准)</p><p>  synchronized(线程，同步)：一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块</p><p>  transient(短暂)</p><p>  volatile(易失)</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>原地址：</p><p>​    1.<a href="https://blog.csdn.net/coder150806/article/details/84334178">https://blog.csdn.net/coder150806/article/details/84334178</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java关键字 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
