<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>me</title>
      <link href="2020/11/01/hello-world/"/>
      <url>2020/11/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1604738808983&di=6c7658cf14666c17a4ed5aada60cdc6d&imgtype=0&src=http://c-ssl.duitang.com/uploads/item/201911/12/20191112221928_vNLCh.thumb.700_0.jpeg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> me </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试题</title>
      <link href="2020/11/01/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2020/11/01/java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-面向对象都有哪些特性以及你对这些特性的理解"><a href="#1-面向对象都有哪些特性以及你对这些特性的理解" class="headerlink" title="1.面向对象都有哪些特性以及你对这些特性的理解"></a>1.面向对象都有哪些特性以及你对这些特性的理解</h2><p> 封装、继承、多态</p><h2 id="2-访问权限修饰符public、private、protected-以及不写（默认）时的区别"><a href="#2-访问权限修饰符public、private、protected-以及不写（默认）时的区别" class="headerlink" title="2.访问权限修饰符public、private、protected, 以及不写（默认）时的区别"></a>2.访问权限修饰符public、private、protected, 以及不写（默认）时的区别</h2><table><thead><tr><th align="center">修饰符</th><th align="center">当前类</th><th align="center">同胞</th><th align="center">子类</th><th align="center">其他包</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">default</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h2 id="3-重载（overload）和重写（override）的区别？重载的方法能否根据返回类型进行区分？"><a href="#3-重载（overload）和重写（override）的区别？重载的方法能否根据返回类型进行区分？" class="headerlink" title="3.重载（overload）和重写（override）的区别？重载的方法能否根据返回类型进行区分？"></a>3.重载（overload）和重写（override）的区别？重载的方法能否根据返回类型进行区分？</h2><p>​        方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。</p><p>​        重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；</p><p>​        重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求。</p><h2 id="4-抽象类-abstract-class-和接口-interface-有什么异同？"><a href="#4-抽象类-abstract-class-和接口-interface-有什么异同？" class="headerlink" title="4.抽象类(abstract class)和接口(interface)有什么异同？"></a>4.抽象类(abstract class)和接口(interface)有什么异同？</h2><p>不同： </p><p>抽象类： </p><p>1.抽象类中可以定义构造器 </p><p>2.可以有抽象方法和具体方法 </p><p>3.接口中的成员全都是public的 </p><p>4.抽象类中可以定义成员变量 </p><p>5.有抽象方法的类必须被声明为抽象类，而抽象类未必要有抽象方法 </p><p>6.抽象类中可以包含静态方法</p><h2 id="5-阐述静态变量和实例变量的区别？"><a href="#5-阐述静态变量和实例变量的区别？" class="headerlink" title="5.阐述静态变量和实例变量的区别？"></a>5.阐述静态变量和实例变量的区别？</h2><p>静态变量: 是被 static 修饰符修饰的变量，也称为类变量，它属于类，不属于类的任何一个对象，一个类不管创建多少个对象，静态变量在内存中有且仅有一个拷贝； </p><p>实例变量: 必须依存于某一实例，需要先创建对象然后通过对象才能访问到它。静态变量可以实现让多个对象共享内存。</p><h2 id="6-和equals的区别？"><a href="#6-和equals的区别？" class="headerlink" title="6.==和equals的区别？"></a>6.==和equals的区别？</h2><p>equals和== 最大的区别是一个是方法一个是运算符。 </p><p>==：如果比较的对象是基本数据类型，则比较的是数值是否相等；如果比较的是引用数据类型，则比较的是对象的地址值是否相等。 </p><p>equals()：用来比较方法中两个对象的内容是否相等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> java面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java关键字</title>
      <link href="2020/11/01/java%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>2020/11/01/java%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是关键字？"><a href="#一、什么是关键字？" class="headerlink" title="一、什么是关键字？"></a><strong>一、什么是关键字？</strong></h1><p><strong>关键字是java语言中一些被赋予特定意义的一些单词，不可以把它当做标识符来使用。</strong></p><p><strong>在java中有\</strong>两个特殊的关键字goto、const，*<em>我们称这两个关键字为*</em>保留字。****</p><h1 id="二、java中有哪些关键字？"><a href="#二、java中有哪些关键字？" class="headerlink" title="二、java中有哪些关键字？"></a><strong>二、java中有哪些关键字？</strong></h1><h2 id="总表：java关键字共53个（其中包含两个保留字const，goto）"><a href="#总表：java关键字共53个（其中包含两个保留字const，goto）" class="headerlink" title="总表：java关键字共53个（其中包含两个保留字const，goto）"></a>总表：java关键字共53个（其中包含两个保留字const，goto）</h2><table><thead><tr><th><a href="https://baike.baidu.com/item/abstract">abstract</a></th><th><a href="https://baike.baidu.com/item/assert">assert</a></th><th><a href="https://baike.baidu.com/item/boolean">boolean</a></th><th>break</th><th><a href="https://baike.baidu.com/item/byte">byte</a></th></tr></thead><tbody><tr><td>case</td><td><a href="https://baike.baidu.com/item/catch">catch</a></td><td><a href="https://baike.baidu.com/item/char">char</a></td><td><a href="https://baike.baidu.com/item/class">class</a></td><td>const</td></tr><tr><td>continue</td><td><a href="https://baike.baidu.com/item/default">default</a></td><td><a href="https://baike.baidu.com/item/do">do</a></td><td><a href="https://baike.baidu.com/item/double">double</a></td><td><a href="https://baike.baidu.com/item/else">else</a></td></tr><tr><td><a href="https://baike.baidu.com/item/enum">enum</a></td><td><a href="https://baike.baidu.com/item/extends">extends</a></td><td><a href="https://baike.baidu.com/item/final">final</a></td><td><a href="https://baike.baidu.com/item/finally">finally</a></td><td>float</td></tr><tr><td><a href="https://baike.baidu.com/item/for">for</a></td><td>goto</td><td><a href="https://baike.baidu.com/item/if">if</a></td><td><a href="https://baike.baidu.com/item/implements">implements</a></td><td><a href="https://baike.baidu.com/item/import">import</a></td></tr><tr><td><a href="https://baike.baidu.com/item/instanceof">instanceof</a></td><td><a href="https://baike.baidu.com/item/int">int</a></td><td><a href="https://baike.baidu.com/item/interface">interface</a></td><td>long</td><td>native</td></tr><tr><td>new</td><td><a href="https://baike.baidu.com/item/package">package</a></td><td><a href="https://baike.baidu.com/item/private">private</a></td><td><a href="https://baike.baidu.com/item/protected">protected</a></td><td><a href="https://baike.baidu.com/item/public">public</a></td></tr><tr><td><a href="https://baike.baidu.com/item/return">return</a></td><td><a href="https://baike.baidu.com/item/strictfp">strictfp</a></td><td><a href="https://baike.baidu.com/item/short">short</a></td><td><a href="https://baike.baidu.com/item/static">static</a></td><td><a href="https://baike.baidu.com/item/super">super</a></td></tr><tr><td><a href="https://baike.baidu.com/item/switch">switch</a></td><td><a href="https://baike.baidu.com/item/synchronized">synchronized</a></td><td><a href="https://baike.baidu.com/item/this">this</a></td><td><a href="https://baike.baidu.com/item/throw">throw</a></td><td><a href="https://baike.baidu.com/item/throws">throws</a></td></tr><tr><td><a href="https://baike.baidu.com/item/transient">transient</a></td><td>try</td><td><a href="https://baike.baidu.com/item/void">void</a></td><td><a href="https://baike.baidu.com/item/volatile">volatile</a></td><td><a href="https://baike.baidu.com/item/while">while</a></td></tr><tr><td>true</td><td>false</td><td>null</td><td></td><td></td></tr></tbody></table><p>　另外，Java还有3个<a href="https://baike.baidu.com/item/%E4%BF%9D%E7%95%99%E5%AD%97/7674788">保留字</a>:true、false、null。它们不是关键字，而是文字。包含Java定义的值。和关键字一样,它们也不可以作为<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AF%86%E7%AC%A6/7105638">标识符</a>使用。参考<a href="https://baike.baidu.com/item/java%E5%85%B3%E9%94%AE%E5%AD%97/5808816?fr=aladdin#3_43">https://baike.baidu.com/item/java%E5%85%B3%E9%94%AE%E5%AD%97/5808816?fr=aladdin#3_43</a></p><h1 id="二）大致含义"><a href="#二）大致含义" class="headerlink" title="二）大致含义"></a><strong>二）大致含义</strong></h1><table><thead><tr><th><strong>关键字</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循[IEEE 754](<a href="https://baike.baidu.com/item/IEEE">https://baike.baidu.com/item/IEEE</a> 754)算术规范 [1]</td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>while</td><td>用在循环结构中</td></tr></tbody></table><h3 id="1-什么是访问修饰符？"><a href="#1-什么是访问修饰符？" class="headerlink" title="1.什么是访问修饰符？"></a>1.什么是访问修饰符？</h3><p>java通过修饰符来控制类、属性和方法的访问权限和其他功能，一般放再java语句的最前端。</p><h3 id="2-访问修饰符的访问权限的范围"><a href="#2-访问修饰符的访问权限的范围" class="headerlink" title="2.访问修饰符的访问权限的范围"></a>2.访问修饰符的访问权限的范围</h3><table><thead><tr><th>修饰符</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>共有的，对所有类可见。</td></tr><tr><td>protected</td><td>受保护的，对同一包内的类和所有子类可见。</td></tr><tr><td>默认的</td><td>在同一包中可见，默认不使用任何修饰符。</td></tr><tr><td>private</td><td>私有的，在同一类可见，也就是在同一类中可访问。</td></tr></tbody></table><p>从上述表格可以看出从public、protected、默认的、private的访问权限范围依次减少。</p><p><strong>class：定义类的关键字。</strong></p><p><strong>interface：定义接口的关键字。</strong></p><p><strong>abstract ：定义抽象类或者抽象方法的关键字。</strong></p><p><strong>enum：定义枚举的关键字。</strong></p><p><strong>extends：继承类或者继承接口的关键字。</strong></p><p><strong>implements：实现接口的关键字。</strong></p><p><strong>new：实例化对象的关键字。</strong></p><p><strong>void：数据类型的关键字。</strong></p><p><strong>byte、short、int、long：整型数据的关键字 是指十进制类型的</strong></p><h3 id="整数数据类型"><a href="#整数数据类型" class="headerlink" title="整数数据类型:"></a><strong>整数数据类型:</strong></h3><table><thead><tr><th>数据类型</th><th>内存空间（8位等于一个字节）</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>8位</td><td>-2^7~2^7-1</td></tr><tr><td>short</td><td>16位</td><td>-2^15~2^15-1</td></tr><tr><td>int</td><td>32位</td><td>-2^31~2^31-1</td></tr><tr><td>long</td><td>64位</td><td>-2^63~2^63-1</td></tr></tbody></table><p><strong>float、double是指浮点型数据的关键字。</strong></p><h3 id="浮点型类型数据："><a href="#浮点型类型数据：" class="headerlink" title="浮点型类型数据："></a><strong>浮点型类型数据：</strong></h3><table><thead><tr><th>数据类型</th><th>内存空间</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>32位</td><td>1.4E-45~3.4028235E38</td></tr><tr><td>double</td><td>64位</td><td>4.9E-324~1.7976931348623157E308</td></tr></tbody></table><p><strong>在默认的情况下，小数被看做是double型，若使用float型的小数，则需要在小数后面加上f或者F。若是double型数据，可以在小数后面加d或者D，不加d也不会出错</strong>。</p><p><strong>char:字符的关键字    16位    范围是0~65535</strong></p><p><strong>boolean：布尔类型的关键字  它的值有true和false</strong></p><h3 id="this关键字："><a href="#this关键字：" class="headerlink" title="this关键字："></a><strong>this关键字：</strong></h3><p><strong>this关键字用来表示当前对象本身，或者当前类的一个实例化对象，通过this可以调用对象的所有属性和方法。静态方法中不能使用this关键字。</strong></p><p><strong>this关键字的三个用法：</strong></p><p><strong>1.通过this关键字可以明确地去访问一个类的成员变量和成员方法，解决与局部变量名的冲突。</strong></p><p><strong>2.this关键字调用构造方法：构造方法是在实例化对象时java虚拟机自动调用的，不能像调用普通方法那样去调用，可以通过this（参数1，参数2…..）的型式调用其他的构造方法。</strong></p><p><strong>使用this关键字调用构造方法时需要\</strong>注意**的是：**</p><p>*<strong>只能在构造方法中使用this调用其他构造方法，**</strong>不能在对象的成员方法中使用this调用构造方法**</p><p>*<strong>在构造方法中，用this调用构造方法的语句**</strong>必须放在第一位，并且写一次。**</p><p>*<strong>不能再**</strong>一个类的两个方法中使用this相互调用**<strong>，不然会报错。</strong></p><p><strong>3.this还可以表示当前对象，也就是哪个对象在调用this所在的方法，那么此时this就是代表着这个对象。</strong></p><h3 id="super关键字："><a href="#super关键字：" class="headerlink" title="super关键字："></a><strong>super关键字：</strong></h3><p><strong>super关键字代表父类对象，主要用于指定父类的属性和方法，也用于在子类中初始化父类。子类的静态方法中不能使用super关键字。</strong></p><p><strong>那么为什么super不能用于子类的静态方法中呢？</strong></p><p><strong>原因是super指代的是父类的一个对象，它需要在运行的时候才会被创建，二静态方法是指类方法，当类加载的时候，静态方法就已经存在，但是父类对象还没有被初始化。</strong></p><p><strong>super关键字的用法:</strong></p><ul><li><strong>使用super关键字可以在子类中调用父类的属性和方法，当子类和父类拥有相同的属性和方法时，此时如果你想调用父类的属性和方法，那么就必须使用super关键字，如果不使用的话，父类的方法和属性就会被子类覆盖。</strong></li><li><strong>子类是父类的派生类，它的实例化依赖于父类的实例化。所以它的任何一个构造函数都必须要初始化父类，Java就是super关键字调用父类构造方法，来完成这个操作。如果在父类没有无参构造方法，那么在子类中必须显示调用super来调用已有的有参构造函数来初始化父类。</strong></li></ul><p>下面是一个关于构造方法的例子：<strong>讲的是如果在父类没有无参构造方法，那么在子类中必须显示调用super来调用已有的有参构造函数来初始化父类。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Demo1</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在运动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在休息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token keyword">extends</span> <span class="token class-name">Demo1</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">Demo2</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> </code></pre><h3 id="异常的关键字："><a href="#异常的关键字：" class="headerlink" title="异常的关键字："></a>异常的关键字：</h3><p><strong>try：用来检测语句块中是否有异常    try{}</strong></p><p><strong>catch：用来捕获异常，然后进行处理  catch(异常类型){}</strong></p><p><strong>如果在try-catch语句进行异常处理，当try代码块中的语句发生了异常，程序就会调转到catch代码中执行，执行完catch代码块中的程序代码后，将继续执行catch代码后的其它代码，而不会执行try代码块中发生异常语句后面的代码。由此可知，java的异常处理机制是结构化的，不会因为一个异常影响整个程序的执行。</strong></p><p><strong>finally：不管是否发生异常，都会执行的语句块    finally{}</strong></p><p><strong>注意，在以下四种特殊情况下finally语句块不会执行：</strong></p><p>​    1.    <strong>在finally语句块中发生了异常；</strong></p><p>​    2.    <strong>在前面的代码中使用了System.exit()退出程序；</strong></p><p>​    3.    <strong>程序所在的线程死亡；</strong></p><p>​    4.    <strong>关闭cpu；</strong></p><p><strong>volatile：数据同步。</strong></p><p><strong>synchronized:同步可以用来同步方法、同步代码块</strong></p><p><strong>循环的关键字： for 、while、do、break、continue</strong></p><p><strong>接下来主要讲讲break和continue关键字：</strong></p><p><strong>break关键字和continue关键字是用来控制循环的跳转的；</strong></p><p><strong>break语句可以用来跳出switch结构。在循环结构中，同样可以用break语句跳出当前循环体，从而中断循环。<br>1.break跳出循环。下面是实例代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果为：</p><p><img src="https://img-blog.csdnimg.cn/20181122125318975.png" alt="img"></p><p><strong>2. 在内层嵌套循环中使用break跳出内层循环。下面是实例代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"  j="</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果：</p><p><img src="https://img-blog.csdnimg.cn/20181122130002268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVyMTUwODA2,size_16,color_FFFFFF,t_70" alt="img"></p><p> <strong>continue语句是对break语句的补充。continue不是立即跳出循环体，而是指跳出本次循环结束前的语句，回到循环的条件测试部分，重新开始执行。</strong></p><p><strong>下面试一个实例，输出1~10之间的奇数，使用continue跳出循环。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//如果i为偶数，跳到下一循环</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出i的值</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果：</p><p><img src="https://img-blog.csdnimg.cn/20181122130939610.png" alt="img"></p><p> <strong>使用break 标签名可以跳出指定的循环体，此循环体的标签名必须与break标签名一直。这个循环可以是内循环也可以是外循环。</strong></p><p><strong>语法如下：</strong></p><p><strong>标签名：循环体{</strong> </p><p><strong>break 标签名；</strong></p><p><strong>}</strong></p><p><strong>下面是带有标签的break跳出外层循环的实例。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Loop<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token keyword">for</span>循环前用标签标记    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果j等于3就结束外层循环，跳出Loop标签的循环体                                break Loop;    </span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    </code></pre><p>输出结果：</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20181122131834281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVyMTUwODA2,size_16,color_FFFFFF,t_70" alt="img"></h3><p> <strong>与break语句一样，continue也支持标签功能。语法如下：<br>标签名：循环体{</strong></p><p>​     <strong>continue 标签名；</strong></p><p><strong>}</strong></p><p><strong>标签名：可以说任意标识符； 循环体：任意循环语句； continue标签名：continue跳出指定的循环体，此循环体的标签名必须与continue的标签名一致；</strong></p><p><strong>条件关键字：if、else、switch、case、default</strong></p><p><strong>return：返回结果的关键字；</strong></p><p><strong>package：定义包的关键字；</strong></p><p><strong>native：调用C或者C++的代码；</strong></p><p><strong>assert：断言；</strong></p><p><strong>transient：瞬时的  IO流的对象流</strong></p><h3 id="instanceof关键字："><a href="#instanceof关键字：" class="headerlink" title="instanceof关键字："></a><strong>instanceof关键字：</strong></h3><p><strong>java中，instanceof运算符的前一个操作符是一个引用变量，后一个操作数通常是一个类（可以是接口），用于判断前面的对象是否是后面的类，或者其子类、实现类的实例。如果是返回true，否则返回false。</strong></p><p><strong>也就是说：使用instanceof关键字做判断时， instanceof 操作符的左右操作数必须有继承或实现关系<br>例如a是A类的一个实例对象，那么   a instanceof  A ； 则会返回一个true的布尔值。</strong></p><h3 id="static关键字："><a href="#static关键字：" class="headerlink" title="static关键字："></a><strong>static关键字：</strong></h3><p><strong>由static修饰的变量、常量、和方法称作静态变量、常量、方法；</strong></p><p><strong>有时候在处理问题时会需要两个类或者多个类在一个内存空间区域共享一个数据。那么在此时需要将它定义为静态的数据；</strong></p><p><strong>被声明为static的变量、常量和方法被称为静态成员。静态成员属于类所有，区别于个别的对象，可以在本类或其他类使用类名和其他类名和“.”运算符调用静态成员。</strong></p><p><strong>static的主要作用：为特定数据类型或对象分配单一的存贮空间，而与创建对象的个数无关。或者把某个方法或属性与类而不是对象关联在一起。</strong></p><p><strong>static的使用：参考：</strong><a href="https://blog.csdn.net/chaoshenzhaoxichao/article/details/80402768">https://blog.csdn.net/chaoshenzhaoxichao/article/details/80402768</a></p><p><strong>1.可以用来修饰常量；</strong></p><p><strong>2.可以用来修饰成员变量，通过static关键字来达到全局的效果。静态变量 属于类，在内存中只有一个副本。只要静态变量所在的类被加载，这个静态类就会被分配空间，因此就可以被使用。对静态变量的引用有两种方式，分别为“类.静态变量”和“对象.静态变量”。实例变量属于对象，只有对象被创建后，实例变量才会被分配空间，才能被使用，他在内存中存在多个副本，只能用“对象.静态变量”的方式来引用。静态变量只有一个，被类所拥有，所有的对象都共享这个静态变量。</strong></p><p><strong>3.可以用来修饰成员方法，static方法是属于类的方法</strong>，<strong>不需要创建对象就可以被使用，而非static方法是对象的方法，只有对象被创建出来后才可以被使用。static方法中不能使用this和super关键字，不能调用非静态方法，只能访问静态的成员变量和方法。static谁能实现单例模式，单例模式的特点是该类只有一个实例。</strong></p><p><strong>4</strong>.<strong>static可以用来修饰代码块，static代码块在类中是独立与成员变量和成员函数的代码块，他不在任何一个方法体内，JVM在加载里的时候会执行static代码块，如果有多个static代码块，JVM将会按顺序来执行，static代码块经常会被用来初始化静态变量，需要注意的是static代码块只会被执行一次。</strong></p><p><strong>5.static可以用来修饰内部类，static内部类是指被申明为static的内部类，他可以不依赖于外部类实例对象而被实例化，而通常的内部类需要外部类实例化后才能实例化。静态内部类不能与外部类有相同的名字，不能访问外部类的普通成员变量，只能访问外部类中的静态成员和静态成员方法，只有内部类才能被申明为static。</strong></p><h3 id="final关键字："><a href="#final关键字：" class="headerlink" title="final关键字："></a><strong>final关键字：</strong></h3><p><strong>final表示最终的，final可以用来修饰普通方法、属性、变量、形参、常量、类、内部类。</strong></p><p><strong>如果修饰普通方法，表示该方法不能被重写；</strong></p><p><strong>如果修饰属性、变量、形参，表示值不能改变；</strong></p><p><strong>如果修饰类，表示类不能被继承。</strong></p><p><strong>属性、变量、形参、常量的名字中的存储的内容是不能改变的</strong></p><h3 id="JAVA的保留关键字（2个）"><a href="#JAVA的保留关键字（2个）" class="headerlink" title="JAVA的保留关键字（2个）"></a>JAVA的保留关键字（2个）</h3><p>   const——常量，常数：用于修改字段或局部变量的声明。</p><p>   goto——转到：指定跳转到标签，找到标签后，程序将处理从下一行开始的命令</p><h3 id="修饰方法、类、属性和变量（9个）"><a href="#修饰方法、类、属性和变量（9个）" class="headerlink" title="修饰方法、类、属性和变量（9个）"></a>修饰方法、类、属性和变量（9个）</h3><p>  static(静态的)：属性和方法都可以用static修饰，直接使用类名、属性和方法名。只有内部类可以使用static关键字修饰，调用直接使用类名、内部类类名进行调用。static可以独立存在</p><p>  final(最终的不可被改变)：方法和类都可用final来修饰；final修饰的类是不能被继承的；final修饰的方法是不能被子类重写。常量的定义：final修饰的属性就是常量</p><p>  super(调用父类的方法)：常见public void paint(Graphics g){super.paint(g);…}</p><p>  this(当前类的父类的对象)：调用当前类中的方法（表示调用这个方法的对象）this.addActionListener(al):等等</p><p>  native(本地)</p><p>  strictfp(严格，精准)</p><p>  synchronized(线程，同步)：一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块</p><p>  transient(短暂)</p><p>  volatile(易失)</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> java关键字 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
