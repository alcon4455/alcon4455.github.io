<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>html面试</title>
      <link href="2020/11/01/html%E9%9D%A2%E8%AF%95/"/>
      <url>2020/11/01/html%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h3 id="1、每个-HTML-文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？"><a href="#1、每个-HTML-文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？" class="headerlink" title="1、每个 HTML 文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？"></a>1、每个 HTML 文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？</h3><pre><code> &lt;!DOCTYPE&gt;声明位于文档中的最前面的位置，处于  标签之前。此标签可告知浏 览器文档使用哪种 HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面） </code></pre><h3 id="2、div-css-的布局较-table-布局有什么优点？"><a href="#2、div-css-的布局较-table-布局有什么优点？" class="headerlink" title="2、div+css 的布局较 table 布局有什么优点？"></a>2、div+css 的布局较 table 布局有什么优点？</h3><p>​     改版的时候更方便 只要改 css 文件。 </p><p>​    页面加载速度更快、结构化清晰、页面显示简洁。 </p><p>​    表现与结构相分离。 </p><p>​    易于优化（seo）搜索引擎更友好，排名更容易靠前。</p><h3 id="3、-img-的-alt-与-title-有何异同？-strong-与-em-的异同？"><a href="#3、-img-的-alt-与-title-有何异同？-strong-与-em-的异同？" class="headerlink" title="3、 img 的 alt 与 title 有何异同？ strong 与 em 的异同？"></a>3、 img 的 alt 与 title 有何异同？ strong 与 em 的异同？</h3><p>​    a:alt(alt text):为不能显示图像、窗体或 applets 的用户代理（UA），alt 属性用来指 定替换文字。替换文字的语言由 lang 属性指定。(在 IE 浏览器下会在没有 title 时把 alt 当成 tool tip 显示) title(tool tip):该属性为设置该属性的元素提供建议性的信息。</p><p>​     strong:粗体强调标签，强调，表示内容的重要性</p><pre><code> em:斜体强调标签，更强烈强调，表示内容的强调点 </code></pre><h4 id="4、简述一下-src-与-href-的区别。"><a href="#4、简述一下-src-与-href-的区别。" class="headerlink" title="4、简述一下 src 与 href 的区别。"></a>4、简述一下 src 与 href 的区别。</h4><p>src 用于替换当前元素，href 用于在当前文档和引用资源之间确立联系。<br>src 是 source 的缩写，指向外部资源的位置，指向的内容将会嵌入到文档中当前标签所在<br>位置；在请求 src 资源时会将其指向的资源下载并应用到文档内，例如 js 脚本，img 图片<br>和 frame 等元素。</p><script src =”js.js”></script><p>当浏览器解析到该元素时，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行<br>完毕，图片和框架等元素也如此，类似于将所指向资源嵌入当前标签内。这也是为什么将<br>js 脚本放在底部而不是头部。<br>href 是 Hypertext Reference 的缩写，指向网络资源所在位置，建立和当前元素（锚点）<br>或当前文档（链接）之间的链接，如果我们在文档中添加</p><link href="common.css" rel="stylesheet"/>那么浏览器会识别该文档为 css 文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用 link 方式来加载 css，而不是使用@import 方式。<h3 id="5、知道的网页制作会用到的图片格式有哪些？"><a href="#5、知道的网页制作会用到的图片格式有哪些？" class="headerlink" title="5、知道的网页制作会用到的图片格式有哪些？"></a>5、知道的网页制作会用到的图片格式有哪些？</h3><p>png-8，png-24，jpeg，gif，svg。 但是上面的那些都不是面试官想要的最后答案。</p><p>面试官希望听到是 Webp。（是否有关注新 技术，新鲜事物）</p><p> 科普一下 Webp：WebP 格式，谷歌（google）开发的一种旨在加快图片加载速度的图片格式。 图片压缩体积大约只有 JPEG 的 2/3，并能节省大量的服务器带宽资源和数据空间。Facebook Ebay 等知名网站已经开始测试并使用 WebP 格式。 在质量相同的情况下，WebP 格式图像的体积要比 JPEG 格式图像小 40% </p><h3 id="6、行内元素和块级元素的具体区别是什么？行内元素的-padding-和-margin-可-设置吗？"><a href="#6、行内元素和块级元素的具体区别是什么？行内元素的-padding-和-margin-可-设置吗？" class="headerlink" title="6、行内元素和块级元素的具体区别是什么？行内元素的 padding 和 margin 可 设置吗？"></a>6、行内元素和块级元素的具体区别是什么？行内元素的 padding 和 margin 可 设置吗？</h3><p>块级元素(block)特性：<br>总是独占一行，表现为另起一行开始，而且其后的元素也必须另起一行显示;<br>宽度(width)、高度(height)、内边距(padding)和外边距(margin)都可控制;<br>内联元素(inline)特性：<br>和相邻的内联元素在同一行;<br>宽度(width)、高度(height)、内边距的 top/bottom(padding-top/padding-bottom)和外边<br>距的 top/bottom(margin-top/margin-bottom)都不可改变（也就是 padding 和 margin 的<br>left 和 right 是可以设置的），就是里面文字或图片的大小。<br>那么问题来了，浏览器还有默认的天生 inline-block 元素（拥有内在尺寸，可设置高宽，<br>但不会自动换行），有哪些？<br>答案：<input> 、<img> 、<button> 、<texterea> 、<label>。</p><h3 id="7、display-none-与-visibility-hidden-的区别是什么？"><a href="#7、display-none-与-visibility-hidden-的区别是什么？" class="headerlink" title="7、display:none 与 visibility:hidden 的区别是什么？"></a>7、display:none 与 visibility:hidden 的区别是什么？</h3><p>display : 隐藏对应的元素但不挤占该元素原来的空间。<br>visibility: 隐藏对应的元素并且挤占该元素原来的空间。<br>即是，使用 CSS display:none 属性后，HTML 元素（对象）的宽度、高度等各种属性值都将<br>“丢失”;而使用 visibility:hidden 属性后，HTML 元素（对象）仅仅是在视觉上看不见（完<br>全透明），而它所占据的空间位置仍然存在。</p>]]></content>
      
      
      
        <tags>
            
            <tag> html面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>me</title>
      <link href="2020/11/01/hello-world/"/>
      <url>2020/11/01/hello-world/</url>
      
        <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1604738808983&di=6c7658cf14666c17a4ed5aada60cdc6d&imgtype=0&src=http://c-ssl.duitang.com/uploads/item/201911/12/20191112221928_vNLCh.thumb.700_0.jpeg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> me </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="2020/11/01/Markdown%E8%AF%AD%E6%B3%95/"/>
      <url>2020/11/01/Markdown%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>原文链接：<a href="http://dwz.date/deXD">http://dwz.date/deXD</a></p><p><strong>声明：</strong> 这份文档派生(fork)于<a href="http://markdown.tw/">繁体中文版</a>，在此基础上进行了繁体转简体工作，并进行了适当的润色。此文档用 Markdown 语法编写，你可以到这里<a href="https://github.com/appinncom/Markdown-Syntax-CN/blob/master/syntax.md">查看它的源文件</a>。「繁体中文版的原始文件可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md">查看这里</a> 。」–By @<a href="https://twitter.com/riku">riku</a></p><p><strong>注：</strong> 本项目托管于 <a href="https://github.com/appinncom/Markdown-Syntax-CN">Github</a>，由<a href="https://www.appinn.com/">小众软件</a>重构。</p><h1 id="Markdown-语法说明-简体中文版"><a href="#Markdown-语法说明-简体中文版" class="headerlink" title="Markdown 语法说明 (简体中文版)"></a>Markdown 语法说明 (简体中文版)</h1><p>快速入门：(<a href="https://www.appinn.com/markdown/basic.html">点击查看快速入门</a>)</p><p><a href="https://www.appinn.com/markdown/#markdown-%E8%AF%AD%E6%B3%95%E8%AF%B4%E6%98%8E-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%E7%89%88">Markdown 语法说明 (简体中文版)</a><a href="https://www.appinn.com/markdown/#%E6%A6%82%E8%BF%B0">概述</a><a href="https://www.appinn.com/markdown/#%E5%AE%97%E6%97%A8">宗旨</a><a href="https://www.appinn.com/markdown/#%E5%85%BC%E5%AE%B9-html">兼容 HTML</a><a href="https://www.appinn.com/markdown/#%E7%89%B9%E6%AE%8A%E5%AD%97%E7%AC%A6%E8%87%AA%E5%8A%A8%E8%BD%AC%E6%8D%A2">特殊字符自动转换</a><a href="https://www.appinn.com/markdown/#%E5%8C%BA%E5%9D%97%E5%85%83%E7%B4%A0">区块元素</a><a href="https://www.appinn.com/markdown/#%E6%AE%B5%E8%90%BD%E5%92%8C%E6%8D%A2%E8%A1%8C">段落和换行</a><a href="https://www.appinn.com/markdown/#%E6%A0%87%E9%A2%98">标题</a><a href="https://www.appinn.com/markdown/#%E5%8C%BA%E5%9D%97%E5%BC%95%E7%94%A8-blockquotes">区块引用 Blockquotes</a><a href="https://www.appinn.com/markdown/#%E5%88%97%E8%A1%A8">列表</a><a href="https://www.appinn.com/markdown/#%E4%BB%A3%E7%A0%81%E5%8C%BA%E5%9D%97">代码区块</a><a href="https://www.appinn.com/markdown/#%E5%88%86%E9%9A%94%E7%BA%BF">分隔线</a><a href="https://www.appinn.com/markdown/#%E5%8C%BA%E6%AE%B5%E5%85%83%E7%B4%A0">区段元素</a><a href="https://www.appinn.com/markdown/#%E9%93%BE%E6%8E%A5">链接</a><a href="https://www.appinn.com/markdown/#%E5%BC%BA%E8%B0%83">强调</a><a href="https://www.appinn.com/markdown/#%E4%BB%A3%E7%A0%81">代码</a><a href="https://www.appinn.com/markdown/#%E5%9B%BE%E7%89%87">图片</a><a href="https://www.appinn.com/markdown/#%E5%85%B6%E5%AE%83">其它</a><a href="https://www.appinn.com/markdown/#%E8%87%AA%E5%8A%A8%E9%93%BE%E6%8E%A5">自动链接</a><a href="https://www.appinn.com/markdown/#%E5%8F%8D%E6%96%9C%E6%9D%A0">反斜杠</a><a href="https://www.appinn.com/markdown/#%E6%84%9F%E8%B0%A2">感谢</a><a href="https://www.appinn.com/markdown/#%E9%93%BE%E6%8E%A5-n3560">链接</a></p><hr><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="宗旨"><a href="#宗旨" class="headerlink" title="宗旨"></a>宗旨</h3><p>Markdown 的目标是实现「易读易写」。</p><p>可读性，无论如何，都是最重要的。一份使用 Markdown 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/">atx</a>、<a href="http://textism.com/tools/textile/">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/">EtText</a>，而最大灵感来源其实是纯文本电子邮件的格式。</p><p>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><h3 id="兼容-HTML"><a href="#兼容-HTML" class="headerlink" title="兼容 HTML"></a>兼容 HTML</h3><p>Markdown 语法的目标是：成为一种适用于网络的<em>书写</em>语言。</p><p>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想<em>不是</em>要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种<em>发布</em>的格式，Markdown 是一种<em>书写</em>的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p><p>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。</p><p>要制约的只有一些 HTML 区块元素――比如 <code>、</code>、<code>、</code> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 `` 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格：</p><pre><code>这是一个普通段落。&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。</code></pre><p>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<code>*强调*</code>会没有效果。</p><p>HTML 的区段（行内）标签如 <code>、</code>、<code>~~</code>~~ 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <code>或</code> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。</p><p>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。</p><h3 id="特殊字符自动转换"><a href="#特殊字符自动转换" class="headerlink" title="特殊字符自动转换"></a>特殊字符自动转换</h3><p>在 HTML 文件中，有两个字符需要特殊处理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符号用于起始标签，<code>&amp;</code> 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 <code>&lt;</code> 和 <code>&amp;</code>。</p><p><code>&amp;</code> 字符尤其让网络文档编写者受折磨，如果你要打「<code>AT&amp;T</code>」 ，你必须要写成「<code>AT&amp;T</code>」。而网址中的 <code>&amp;</code> 字符也要转换。比如你要链接到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必须要把网址转换写为：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到链接标签的 <code>href</code> 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。</p><p>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 <code>&amp;</code> 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 <code>&amp;amp</code>;。</p><p>所以你如果要在文档中插入一个版权符号 <code>©</code>，你可以这样写：</p><pre><code>&amp;copy;</code></pre><p>Markdown 会保留它不动。而若你写：</p><pre><code>AT&amp;T</code></pre><p>Markdown 就会将它转为：</p><pre><code>AT&amp;amp;T</code></pre><p>类似的状况也会发生在 <code>&lt;</code> 符号上，因为 Markdown 允许 <a href="https://www.appinn.com/markdown/#html">兼容 HTML</a> ，如果你是把 <code>&lt;</code> 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：</p><pre><code>4 &lt; 5</code></pre><p>Markdown 将会把它转换为：</p><pre><code>4 &amp;lt; 5</code></pre><p>不过需要注意的是，code 范围内，不论是行内还是区块， <code>&lt;</code> 和 <code>&amp;</code> 两个符号都<em>一定</em>会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</p><hr><h2 id="区块元素"><a href="#区块元素" class="headerlink" title="区块元素"></a>区块元素</h2><h3 id="段落和换行"><a href="#段落和换行" class="headerlink" title="段落和换行"></a>段落和换行</h3><p>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。</p><p>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 ``标签。</p><p>如果你<em>确实</em>想要依赖 Markdown 来插入 ``标签的话，在插入处先按入两个以上的空格然后回车。</p><p>的确，需要多费点事（多加空格）来产生 <code>，但是简单地「每个换行都转换为</code>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 <a href="https://www.appinn.com/markdown/#blockquote">区块引用</a> 和多段落的 <a href="https://www.appinn.com/markdown/#list">列表</a> 在使用换行来排版的时候，不但更好用，还更方便阅读。</p><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>Markdown 支持两种标题的语法，类 <a href="http://docutils.sourceforge.net/mirror/setext.html">Setext</a> 和类 <a href="http://www.aaronsw.com/2002/atx/">atx</a> 形式。</p><p>类 Setext 形式是用底线的形式，利用 <code>=</code> （最高阶标题）和 <code>-</code> （第二阶标题），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何数量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>类 Atx 形式则是在行首插入 1 到 6 个 <code>#</code> ，对应到标题 1 到 6 阶，例如：</p><pre><code># 这是 H1## 这是 H2###### 这是 H6</code></pre><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><pre><code># 这是 H1 ### 这是 H2 ##### 这是 H3 ######</code></pre><h3 id="区块引用-Blockquotes"><a href="#区块引用-Blockquotes" class="headerlink" title="区块引用 Blockquotes"></a>区块引用 Blockquotes</h3><p>Markdown 标记区块引用是使用类似 email 中用 <code>&gt;</code> 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 <code>&gt;</code>：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><p>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 <code>&gt;</code> ：</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><pre><code>&gt; ## 这是一个标题。&gt; &gt; 1.   这是第一行列表项。&gt; 2.   这是第二行列表项。&gt; &gt; 给出一些例子代码：&gt; &gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择<em>增加引用阶层</em>。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>Markdown 支持有序列表和无序列表。</p><p>无序列表使用星号、加号或是减号作为列表标记：</p><pre><code>*   Red*   Green*   Blue</code></pre><p>等同于：</p><pre><code>+   Red+   Green+   Blue</code></pre><p>也等同于：</p><pre><code>-   Red-   Green-   Blue</code></pre><p>有序列表则使用数字接着一个英文句点：</p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><p>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</p><pre><code>&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你的列表标记写成：</p><pre><code>1.  Bird1.  McHale1.  Parish</code></pre><p>或甚至是：</p><pre><code>3. Bird1. McHale8. Parish</code></pre><p>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。</p><p>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。</p><p>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。</p><p>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,    viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你懒，那也行：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 `` 标签包起来，举例来说：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt;</code></pre><p>但是这个：</p><pre><code>*   Bird*   Magic</code></pre><p>会被转换为：</p><pre><code>&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p><pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p><pre><code>*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You&#39;reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>如果要在列表项目内放进引用，那 <code>&gt;</code> 就需要缩进：</p><pre><code>*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>如果要放代码区块的话，该区块就需要缩进<em>两次</em>，也就是 8 个空格或是 2 个制表符：</p><pre><code>*   一列表项包含一个列表区块：        &lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p><pre><code>1986. What a great season.</code></pre><p>换句话说，也就是在行首出现<em>数字-句点-空白</em>，要避免这样的状况，你可以在句点前面加上反斜杠。</p><pre><code>1986\. What a great season.</code></pre><h3 id="代码区块"><a href="#代码区块" class="headerlink" title="代码区块"></a>代码区块</h3><p>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <code>和</code> 标签来把代码区块包起来。</p><p>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：</p><pre><code>这是一个普通段落：    这是一个代码区块。</code></pre><p>Markdown 会转换成：</p><pre><code>&lt;p&gt;这是一个普通段落：&lt;/p&gt;&lt;pre&gt;&lt;code&gt;这是一个代码区块。&lt;/code&gt;&lt;/pre&gt;</code></pre><p>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：</p><pre><code>Here is an example of AppleScript:    tell application &quot;Foo&quot;        beep    end tell</code></pre><p>会被转换为：</p><pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;    beepend tell&lt;/code&gt;&lt;/pre&gt;</code></pre><p>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。</p><p>在代码区块里面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：</p><pre><code>    &lt;div class=&quot;footer&quot;&gt;        &amp;copy; 2004 Foo Corporation    &lt;/div&gt;</code></pre><p>会被转换为：</p><pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;    &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。</p><h3 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><pre><code>* * *********- - ----------------------------------------</code></pre><hr><h2 id="区段元素"><a href="#区段元素" class="headerlink" title="区段元素"></a>区段元素</h2><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>Markdown 支持两种形式的链接语法： <em>行内式</em>和<em>参考式</em>两种形式。</p><p>不管是哪一种，链接文字都是用 [方括号] 来标记。</p><p>要建立一个<em>行内式</em>的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：</p><pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt;</code></pre><p>如果你是要链接到同样主机的资源，你可以使用相对路径：</p><pre><code>See my [About](/about/) page for details.</code></pre><p><em>参考式</em>的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：</p><pre><code>This is [an example][id] reference-style link.</code></pre><p>你也可以选择性地在两个方括号中间加上一个空格：</p><pre><code>This is [an example] [id] reference-style link.</code></pre><p>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：</p><pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre><p>链接内容定义的形式为：</p><ul><li>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字</li><li>接着一个冒号</li><li>接着一个以上的空格或制表符</li><li>接着链接的网址</li><li>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着</li></ul><p>下面这三种链接的定义都是相同：</p><pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;[foo]: http://example.com/  &#39;Optional Title Here&#39;[foo]: http://example.com/  (Optional Title Here)</code></pre><p><strong>请注意：</strong>有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。</p><p>链接网址也可以用方括号包起来：</p><pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</code></pre><p>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：</p><pre><code>[id]: http://example.com/longish/path/to/resource/here    &quot;Optional Title Here&quot;</code></pre><p>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。</p><p>链接辨别标签可以有字母、数字、空白和标点符号，但是并<em>不</em>区分大小写，因此下面两个链接是一样的：</p><pre><code>[link text][a][link text][A]</code></pre><p><em>隐式链接标记</em>功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：</p><pre><code>[Google][]</code></pre><p>然后定义链接内容：</p><pre><code>[Google]: http://google.com/</code></pre><p>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：</p><pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然后接着定义链接：</p><pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre><p>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。</p><p>下面是一个参考式链接的范例：</p><pre><code>I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].  [1]: http://google.com/        &quot;Google&quot;  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;  [3]: http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>如果改成用链接名称的方式写：</p><pre><code>I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google]: http://google.com/        &quot;Google&quot;  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>上面两种写法都会产生下面的 HTML。</p><pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre><p>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。</p><p>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。</p><h3 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h3><p>Markdown 使用星号（<code>*</code>）和底线（<code>_</code>）作为标记强调字词的符号，被 <code>*</code> 或 <code>_</code> 包围的字词会被转成用 <code>标签包围，用两个</code>*<code>或</code>_<code>包起来的话，则会被转成</code>，例如：</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>会转成：</p><pre><code>&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。</p><p>强调也可以直接插在文字中间：</p><pre><code>un*frigging*believable</code></pre><p>但是<strong>如果你的 <code>\*</code> 和 <code>_</code> 两边都有空白的话，它们就只会被当成普通的符号</strong>。</p><p>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：</p><pre><code>\*this text is surrounded by literal asterisks\*</code></pre><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>如果要标记一小段行内代码，你可以用反引号把它包起来（```），例如：</p><pre><code>Use the `printf()` function.</code></pre><p>会产生：</p><pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：</p><pre><code>``There is a literal backtick (`) here.``</code></pre><p>这段语法会产生：</p><pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：</p><pre><code>A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>会产生：</p><pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在代码区段内，<code>&amp;</code> 和方括号<strong>都</strong>会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：</p><pre><code>Please don&#39;t use any `&lt;blink&gt;` tags.</code></pre><p>转为：</p><pre><code>&lt;p&gt;Please don&#39;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以这样写：</p><pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以产生：</p><pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encodedequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。</p><p>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： <em>行内式</em>和<em>参考式</em>。</p><p>行内式的图片语法看起来像是：</p><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>详细叙述如下：</p><ul><li>一个惊叹号 <code>!</code></li><li>接着一个方括号，里面放上图片的替代文字</li><li>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。</li></ul><p>参考式的图片语法则长得像这样：</p><pre><code>![Alt text][id]</code></pre><p>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：</p><pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code></pre><p>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 `` 标签。</p><hr><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用方括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown 会转为：</p><pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></pre><p>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：</p><pre><code>&lt;address@example.com&gt;</code></pre><p>Markdown 会转成：</p><pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre><p>在浏览器里面，这段字串（其实是 <code>[address@example.com](mailto:address@example.com)</code>）会变成一个可以点击的「<a href="mailto:address@example.com">address@example.com</a>」链接。</p><p>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）</p><h3 id="反斜杠"><a href="#反斜杠" class="headerlink" title="反斜杠"></a>反斜杠</h3><p>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 `` 标签），你可以在星号的前面加上反斜杠：</p><pre><code>\*literal asterisks\*</code></pre><p>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：</p><pre><code>\   反斜线`   反引号*   星号_   底线&#123;&#125;  花括号[]  方括号()  括弧#   井字号+   加号-   减号.   英文句点!   惊叹号</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> markdown语法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java关键字</title>
      <link href="2020/11/01/java%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>2020/11/01/java%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h1 id="一、什么是关键字？"><a href="#一、什么是关键字？" class="headerlink" title="一、什么是关键字？"></a><strong>一、什么是关键字？</strong></h1><p><strong>关键字是java语言中一些被赋予特定意义的一些单词，不可以把它当做标识符来使用。</strong></p><p><strong>在java中有\</strong>两个特殊的关键字goto、const，*<em>我们称这两个关键字为*</em>保留字。****</p><h1 id="二、java中有哪些关键字？"><a href="#二、java中有哪些关键字？" class="headerlink" title="二、java中有哪些关键字？"></a><strong>二、java中有哪些关键字？</strong></h1><h2 id="总表：java关键字共53个（其中包含两个保留字const，goto）"><a href="#总表：java关键字共53个（其中包含两个保留字const，goto）" class="headerlink" title="总表：java关键字共53个（其中包含两个保留字const，goto）"></a>总表：java关键字共53个（其中包含两个保留字const，goto）</h2><table><thead><tr><th><a href="https://baike.baidu.com/item/abstract">abstract</a></th><th><a href="https://baike.baidu.com/item/assert">assert</a></th><th><a href="https://baike.baidu.com/item/boolean">boolean</a></th><th>break</th><th><a href="https://baike.baidu.com/item/byte">byte</a></th></tr></thead><tbody><tr><td>case</td><td><a href="https://baike.baidu.com/item/catch">catch</a></td><td><a href="https://baike.baidu.com/item/char">char</a></td><td><a href="https://baike.baidu.com/item/class">class</a></td><td>const</td></tr><tr><td>continue</td><td><a href="https://baike.baidu.com/item/default">default</a></td><td><a href="https://baike.baidu.com/item/do">do</a></td><td><a href="https://baike.baidu.com/item/double">double</a></td><td><a href="https://baike.baidu.com/item/else">else</a></td></tr><tr><td><a href="https://baike.baidu.com/item/enum">enum</a></td><td><a href="https://baike.baidu.com/item/extends">extends</a></td><td><a href="https://baike.baidu.com/item/final">final</a></td><td><a href="https://baike.baidu.com/item/finally">finally</a></td><td>float</td></tr><tr><td><a href="https://baike.baidu.com/item/for">for</a></td><td>goto</td><td><a href="https://baike.baidu.com/item/if">if</a></td><td><a href="https://baike.baidu.com/item/implements">implements</a></td><td><a href="https://baike.baidu.com/item/import">import</a></td></tr><tr><td><a href="https://baike.baidu.com/item/instanceof">instanceof</a></td><td><a href="https://baike.baidu.com/item/int">int</a></td><td><a href="https://baike.baidu.com/item/interface">interface</a></td><td>long</td><td>native</td></tr><tr><td>new</td><td><a href="https://baike.baidu.com/item/package">package</a></td><td><a href="https://baike.baidu.com/item/private">private</a></td><td><a href="https://baike.baidu.com/item/protected">protected</a></td><td><a href="https://baike.baidu.com/item/public">public</a></td></tr><tr><td><a href="https://baike.baidu.com/item/return">return</a></td><td><a href="https://baike.baidu.com/item/strictfp">strictfp</a></td><td><a href="https://baike.baidu.com/item/short">short</a></td><td><a href="https://baike.baidu.com/item/static">static</a></td><td><a href="https://baike.baidu.com/item/super">super</a></td></tr><tr><td><a href="https://baike.baidu.com/item/switch">switch</a></td><td><a href="https://baike.baidu.com/item/synchronized">synchronized</a></td><td><a href="https://baike.baidu.com/item/this">this</a></td><td><a href="https://baike.baidu.com/item/throw">throw</a></td><td><a href="https://baike.baidu.com/item/throws">throws</a></td></tr><tr><td><a href="https://baike.baidu.com/item/transient">transient</a></td><td>try</td><td><a href="https://baike.baidu.com/item/void">void</a></td><td><a href="https://baike.baidu.com/item/volatile">volatile</a></td><td><a href="https://baike.baidu.com/item/while">while</a></td></tr><tr><td>true</td><td>false</td><td>null</td><td></td><td></td></tr></tbody></table><p>　另外，Java还有3个<a href="https://baike.baidu.com/item/%E4%BF%9D%E7%95%99%E5%AD%97/7674788">保留字</a>:true、false、null。它们不是关键字，而是文字。包含Java定义的值。和关键字一样,它们也不可以作为<a href="https://baike.baidu.com/item/%E6%A0%87%E8%AF%86%E7%AC%A6/7105638">标识符</a>使用。参考<a href="https://baike.baidu.com/item/java%E5%85%B3%E9%94%AE%E5%AD%97/5808816?fr=aladdin#3_43">https://baike.baidu.com/item/java%E5%85%B3%E9%94%AE%E5%AD%97/5808816?fr=aladdin#3_43</a></p><h1 id="二）大致含义"><a href="#二）大致含义" class="headerlink" title="二）大致含义"></a><strong>二）大致含义</strong></h1><table><thead><tr><th><strong>关键字</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循[IEEE 754](<a href="https://baike.baidu.com/item/IEEE">https://baike.baidu.com/item/IEEE</a> 754)算术规范 [1]</td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>while</td><td>用在循环结构中</td></tr></tbody></table><h3 id="1-什么是访问修饰符？"><a href="#1-什么是访问修饰符？" class="headerlink" title="1.什么是访问修饰符？"></a>1.什么是访问修饰符？</h3><p>java通过修饰符来控制类、属性和方法的访问权限和其他功能，一般放再java语句的最前端。</p><h3 id="2-访问修饰符的访问权限的范围"><a href="#2-访问修饰符的访问权限的范围" class="headerlink" title="2.访问修饰符的访问权限的范围"></a>2.访问修饰符的访问权限的范围</h3><table><thead><tr><th>修饰符</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>共有的，对所有类可见。</td></tr><tr><td>protected</td><td>受保护的，对同一包内的类和所有子类可见。</td></tr><tr><td>默认的</td><td>在同一包中可见，默认不使用任何修饰符。</td></tr><tr><td>private</td><td>私有的，在同一类可见，也就是在同一类中可访问。</td></tr></tbody></table><p>从上述表格可以看出从public、protected、默认的、private的访问权限范围依次减少。</p><p><strong>class：定义类的关键字。</strong></p><p><strong>interface：定义接口的关键字。</strong></p><p><strong>abstract ：定义抽象类或者抽象方法的关键字。</strong></p><p><strong>enum：定义枚举的关键字。</strong></p><p><strong>extends：继承类或者继承接口的关键字。</strong></p><p><strong>implements：实现接口的关键字。</strong></p><p><strong>new：实例化对象的关键字。</strong></p><p><strong>void：数据类型的关键字。</strong></p><p><strong>byte、short、int、long：整型数据的关键字 是指十进制类型的</strong></p><h3 id="整数数据类型"><a href="#整数数据类型" class="headerlink" title="整数数据类型:"></a><strong>整数数据类型:</strong></h3><table><thead><tr><th>数据类型</th><th>内存空间（8位等于一个字节）</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td>8位</td><td>-2^7~2^7-1</td></tr><tr><td>short</td><td>16位</td><td>-2^15~2^15-1</td></tr><tr><td>int</td><td>32位</td><td>-2^31~2^31-1</td></tr><tr><td>long</td><td>64位</td><td>-2^63~2^63-1</td></tr></tbody></table><p><strong>float、double是指浮点型数据的关键字。</strong></p><h3 id="浮点型类型数据："><a href="#浮点型类型数据：" class="headerlink" title="浮点型类型数据："></a><strong>浮点型类型数据：</strong></h3><table><thead><tr><th>数据类型</th><th>内存空间</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>32位</td><td>1.4E-45~3.4028235E38</td></tr><tr><td>double</td><td>64位</td><td>4.9E-324~1.7976931348623157E308</td></tr></tbody></table><p><strong>在默认的情况下，小数被看做是double型，若使用float型的小数，则需要在小数后面加上f或者F。若是double型数据，可以在小数后面加d或者D，不加d也不会出错</strong>。</p><p><strong>char:字符的关键字    16位    范围是0~65535</strong></p><p><strong>boolean：布尔类型的关键字  它的值有true和false</strong></p><h3 id="this关键字："><a href="#this关键字：" class="headerlink" title="this关键字："></a><strong>this关键字：</strong></h3><p><strong>this关键字用来表示当前对象本身，或者当前类的一个实例化对象，通过this可以调用对象的所有属性和方法。静态方法中不能使用this关键字。</strong></p><p><strong>this关键字的三个用法：</strong></p><p><strong>1.通过this关键字可以明确地去访问一个类的成员变量和成员方法，解决与局部变量名的冲突。</strong></p><p><strong>2.this关键字调用构造方法：构造方法是在实例化对象时java虚拟机自动调用的，不能像调用普通方法那样去调用，可以通过this（参数1，参数2…..）的型式调用其他的构造方法。</strong></p><p><strong>使用this关键字调用构造方法时需要\</strong>注意**的是：**</p><p>*<strong>只能在构造方法中使用this调用其他构造方法，**</strong>不能在对象的成员方法中使用this调用构造方法**</p><p>*<strong>在构造方法中，用this调用构造方法的语句**</strong>必须放在第一位，并且写一次。**</p><p>*<strong>不能再**</strong>一个类的两个方法中使用this相互调用**<strong>，不然会报错。</strong></p><p><strong>3.this还可以表示当前对象，也就是哪个对象在调用this所在的方法，那么此时this就是代表着这个对象。</strong></p><h3 id="super关键字："><a href="#super关键字：" class="headerlink" title="super关键字："></a><strong>super关键字：</strong></h3><p><strong>super关键字代表父类对象，主要用于指定父类的属性和方法，也用于在子类中初始化父类。子类的静态方法中不能使用super关键字。</strong></p><p><strong>那么为什么super不能用于子类的静态方法中呢？</strong></p><p><strong>原因是super指代的是父类的一个对象，它需要在运行的时候才会被创建，二静态方法是指类方法，当类加载的时候，静态方法就已经存在，但是父类对象还没有被初始化。</strong></p><p><strong>super关键字的用法:</strong></p><ul><li><strong>使用super关键字可以在子类中调用父类的属性和方法，当子类和父类拥有相同的属性和方法时，此时如果你想调用父类的属性和方法，那么就必须使用super关键字，如果不使用的话，父类的方法和属性就会被子类覆盖。</strong></li><li><strong>子类是父类的派生类，它的实例化依赖于父类的实例化。所以它的任何一个构造函数都必须要初始化父类，Java就是super关键字调用父类构造方法，来完成这个操作。如果在父类没有无参构造方法，那么在子类中必须显示调用super来调用已有的有参构造函数来初始化父类。</strong></li></ul><p>下面是一个关于构造方法的例子：<strong>讲的是如果在父类没有无参构造方法，那么在子类中必须显示调用super来调用已有的有参构造函数来初始化父类。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> String name<span class="token operator">=</span><span class="token string">"小明"</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Demo1</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在运动"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"正在休息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo2</span> <span class="token keyword">extends</span> <span class="token class-name">Demo1</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Demo2</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="异常的关键字："><a href="#异常的关键字：" class="headerlink" title="异常的关键字："></a>异常的关键字：</h3><p><strong>try：用来检测语句块中是否有异常    try{}</strong></p><p><strong>catch：用来捕获异常，然后进行处理  catch(异常类型){}</strong></p><p><strong>如果在try-catch语句进行异常处理，当try代码块中的语句发生了异常，程序就会调转到catch代码中执行，执行完catch代码块中的程序代码后，将继续执行catch代码后的其它代码，而不会执行try代码块中发生异常语句后面的代码。由此可知，java的异常处理机制是结构化的，不会因为一个异常影响整个程序的执行。</strong></p><p><strong>finally：不管是否发生异常，都会执行的语句块    finally{}</strong></p><p><strong>注意，在以下四种特殊情况下finally语句块不会执行：</strong></p><p>​    1.    <strong>在finally语句块中发生了异常；</strong></p><p>​    2.    <strong>在前面的代码中使用了System.exit()退出程序；</strong></p><p>​    3.    <strong>程序所在的线程死亡；</strong></p><p>​    4.    <strong>关闭cpu；</strong></p><p><strong>volatile：数据同步。</strong></p><p><strong>synchronized:同步可以用来同步方法、同步代码块</strong></p><p><strong>循环的关键字： for 、while、do、break、continue</strong></p><p><strong>接下来主要讲讲break和continue关键字：</strong></p><p><strong>break关键字和continue关键字是用来控制循环的跳转的；</strong></p><p><strong>break语句可以用来跳出switch结构。在循环结构中，同样可以用break语句跳出当前循环体，从而中断循环。<br>1.break跳出循环。下面是实例代码</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果为：</p><p><img src="https://img-blog.csdnimg.cn/20181122125318975.png" alt="img"></p><p><strong>2. 在内层嵌套循环中使用break跳出内层循环。下面是实例代码：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">"  j="</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果：</p><p><img src="https://img-blog.csdnimg.cn/20181122130002268.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVyMTUwODA2,size_16,color_FFFFFF,t_70" alt="img"></p><p> <strong>continue语句是对break语句的补充。continue不是立即跳出循环体，而是指跳出本次循环结束前的语句，回到循环的条件测试部分，重新开始执行。</strong></p><p><strong>下面试一个实例，输出1~10之间的奇数，使用continue跳出循环。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//如果i为偶数，跳到下一循环</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出i的值</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果：</p><p><img src="https://img-blog.csdnimg.cn/20181122130939610.png" alt="img"></p><p> <strong>使用break 标签名可以跳出指定的循环体，此循环体的标签名必须与break标签名一直。这个循环可以是内循环也可以是外循环。</strong></p><p><strong>语法如下：</strong></p><p><strong>标签名：循环体{</strong> </p><p><strong>break 标签名；</strong></p><p><strong>}</strong></p><p><strong>下面是带有标签的break跳出外层循环的实例。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Loop<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//for循环前用标签标记</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果j等于3就结束外层循环，跳出Loop标签的循环体</span>                <span class="token keyword">break</span> Loop<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>输出结果：</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20181122131834281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NvZGVyMTUwODA2,size_16,color_FFFFFF,t_70" alt="img"></h3><p> <strong>与break语句一样，continue也支持标签功能。语法如下：<br>标签名：循环体{</strong></p><p>​     <strong>continue 标签名；</strong></p><p><strong>}</strong></p><p><strong>标签名：可以说任意标识符； 循环体：任意循环语句； continue标签名：continue跳出指定的循环体，此循环体的标签名必须与continue的标签名一致；</strong></p><p><strong>条件关键字：if、else、switch、case、default</strong></p><p><strong>return：返回结果的关键字；</strong></p><p><strong>package：定义包的关键字；</strong></p><p><strong>native：调用C或者C++的代码；</strong></p><p><strong>assert：断言；</strong></p><p><strong>transient：瞬时的  IO流的对象流</strong></p><h3 id="instanceof关键字："><a href="#instanceof关键字：" class="headerlink" title="instanceof关键字："></a><strong>instanceof关键字：</strong></h3><p><strong>java中，instanceof运算符的前一个操作符是一个引用变量，后一个操作数通常是一个类（可以是接口），用于判断前面的对象是否是后面的类，或者其子类、实现类的实例。如果是返回true，否则返回false。</strong></p><p><strong>也就是说：使用instanceof关键字做判断时， instanceof 操作符的左右操作数必须有继承或实现关系<br>例如a是A类的一个实例对象，那么   a instanceof  A ； 则会返回一个true的布尔值。</strong></p><h3 id="static关键字："><a href="#static关键字：" class="headerlink" title="static关键字："></a><strong>static关键字：</strong></h3><p><strong>由static修饰的变量、常量、和方法称作静态变量、常量、方法；</strong></p><p><strong>有时候在处理问题时会需要两个类或者多个类在一个内存空间区域共享一个数据。那么在此时需要将它定义为静态的数据；</strong></p><p><strong>被声明为static的变量、常量和方法被称为静态成员。静态成员属于类所有，区别于个别的对象，可以在本类或其他类使用类名和其他类名和“.”运算符调用静态成员。</strong></p><p><strong>static的主要作用：为特定数据类型或对象分配单一的存贮空间，而与创建对象的个数无关。或者把某个方法或属性与类而不是对象关联在一起。</strong></p><p><strong>static的使用：参考：</strong><a href="https://blog.csdn.net/chaoshenzhaoxichao/article/details/80402768">https://blog.csdn.net/chaoshenzhaoxichao/article/details/80402768</a></p><p><strong>1.可以用来修饰常量；</strong></p><p><strong>2.可以用来修饰成员变量，通过static关键字来达到全局的效果。静态变量 属于类，在内存中只有一个副本。只要静态变量所在的类被加载，这个静态类就会被分配空间，因此就可以被使用。对静态变量的引用有两种方式，分别为“类.静态变量”和“对象.静态变量”。实例变量属于对象，只有对象被创建后，实例变量才会被分配空间，才能被使用，他在内存中存在多个副本，只能用“对象.静态变量”的方式来引用。静态变量只有一个，被类所拥有，所有的对象都共享这个静态变量。</strong></p><p><strong>3.可以用来修饰成员方法，static方法是属于类的方法</strong>，<strong>不需要创建对象就可以被使用，而非static方法是对象的方法，只有对象被创建出来后才可以被使用。static方法中不能使用this和super关键字，不能调用非静态方法，只能访问静态的成员变量和方法。static谁能实现单例模式，单例模式的特点是该类只有一个实例。</strong></p><p><strong>4</strong>.<strong>static可以用来修饰代码块，static代码块在类中是独立与成员变量和成员函数的代码块，他不在任何一个方法体内，JVM在加载里的时候会执行static代码块，如果有多个static代码块，JVM将会按顺序来执行，static代码块经常会被用来初始化静态变量，需要注意的是static代码块只会被执行一次。</strong></p><p><strong>5.static可以用来修饰内部类，static内部类是指被申明为static的内部类，他可以不依赖于外部类实例对象而被实例化，而通常的内部类需要外部类实例化后才能实例化。静态内部类不能与外部类有相同的名字，不能访问外部类的普通成员变量，只能访问外部类中的静态成员和静态成员方法，只有内部类才能被申明为static。</strong></p><h3 id="final关键字："><a href="#final关键字：" class="headerlink" title="final关键字："></a><strong>final关键字：</strong></h3><p><strong>final表示最终的，final可以用来修饰普通方法、属性、变量、形参、常量、类、内部类。</strong></p><p><strong>如果修饰普通方法，表示该方法不能被重写；</strong></p><p><strong>如果修饰属性、变量、形参，表示值不能改变；</strong></p><p><strong>如果修饰类，表示类不能被继承。</strong></p><p><strong>属性、变量、形参、常量的名字中的存储的内容是不能改变的</strong></p><h3 id="JAVA的保留关键字（2个）"><a href="#JAVA的保留关键字（2个）" class="headerlink" title="JAVA的保留关键字（2个）"></a>JAVA的保留关键字（2个）</h3><p>   const——常量，常数：用于修改字段或局部变量的声明。</p><p>   goto——转到：指定跳转到标签，找到标签后，程序将处理从下一行开始的命令</p><h3 id="修饰方法、类、属性和变量（9个）"><a href="#修饰方法、类、属性和变量（9个）" class="headerlink" title="修饰方法、类、属性和变量（9个）"></a>修饰方法、类、属性和变量（9个）</h3><p>  static(静态的)：属性和方法都可以用static修饰，直接使用类名、属性和方法名。只有内部类可以使用static关键字修饰，调用直接使用类名、内部类类名进行调用。static可以独立存在</p><p>  final(最终的不可被改变)：方法和类都可用final来修饰；final修饰的类是不能被继承的；final修饰的方法是不能被子类重写。常量的定义：final修饰的属性就是常量</p><p>  super(调用父类的方法)：常见public void paint(Graphics g){super.paint(g);…}</p><p>  this(当前类的父类的对象)：调用当前类中的方法（表示调用这个方法的对象）this.addActionListener(al):等等</p><p>  native(本地)</p><p>  strictfp(严格，精准)</p><p>  synchronized(线程，同步)：一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块</p><p>  transient(短暂)</p><p>  volatile(易失)</p><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><p>原地址：</p><p>​    1.<a href="https://blog.csdn.net/coder150806/article/details/84334178">https://blog.csdn.net/coder150806/article/details/84334178</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> java关键字 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java面试题</title>
      <link href="2020/11/01/java%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2020/11/01/java%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1、一个-”-java”-源文件中是否可以包括多个类（不是内部类）？有什么限制？"><a href="#1、一个-”-java”-源文件中是否可以包括多个类（不是内部类）？有什么限制？" class="headerlink" title="1、一个**”.java”**源文件中是否可以包括多个类（不是内部类）？有什么限制？"></a><strong>1</strong>、一个**”.java”**源文件中是否可以包括多个类（不是内部类）？有什么限制？</h3><p>可以有多个类，但只能有一个 public 的类，并且 public 的类名必须与文件名相一致。 </p><h3 id="2、-Java-有没有-goto"><a href="#2、-Java-有没有-goto" class="headerlink" title="2、      Java 有没有 goto?"></a><strong>2、</strong>      <strong>Java</strong> 有没有 <strong>goto?</strong></h3><p>java 中的保留字，现在没有在 java 中使用。 </p><h3 id="3、-说说-amp-和-amp-amp-的区别。"><a href="#3、-说说-amp-和-amp-amp-的区别。" class="headerlink" title="3、      说说**&amp;和&amp;&amp;**的区别。"></a><strong>3、</strong>      说说**&amp;<strong>和</strong>&amp;&amp;**的区别。</h3><p>​        &amp;和&amp;&amp;都可以用作逻辑与的运算符，表示逻辑与（and），当运算符两边的表达式的结果都为 true 时，整个运算结果才为 true，否则，只要有一方为 false，则结果为 false。 &amp;&amp;还具有短路的功能，即如果第一个表达式为 false，则不再计算第二个表达式。 &amp;还可以用作位运算符，当&amp; 操作符两边的表达式不是 boolean 类型时，&amp;表示按位与操作。 </p><h3 id="4、在-JAVA-中如何跳出当前的多重嵌套循环？"><a href="#4、在-JAVA-中如何跳出当前的多重嵌套循环？" class="headerlink" title="4、在 JAVA 中如何跳出当前的多重嵌套循环？"></a><strong>4</strong>、在 <strong>JAVA</strong> 中如何跳出当前的多重嵌套循环？</h3><p>在 Java 中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的 break 语句，即可跳出外层循环。 也可以用 return 跳出多重循环。 </p><h3 id="5、-switch-语句能否作用在-byte-上，能否作用在-long-上，能否作用在-String-上"><a href="#5、-switch-语句能否作用在-byte-上，能否作用在-long-上，能否作用在-String-上" class="headerlink" title="5、      switch 语句能否作用在 byte 上，能否作用在 long 上，能否作用在 String 上**?**"></a><strong>5、</strong>      <strong>switch</strong> 语句能否作用在 <strong>byte</strong> 上，能否作用在 <strong>long</strong> 上，能否作用在 <strong>String</strong> 上**?**</h3><p>​        在 switch（expr1）中，expr1 只能是一个整数表达式或者枚举常量（更大字体），整数表达式可以是 int 基本类型或 Integer 包装类型，由于，byte,short,char 都可以隐含转换为 int，所以，这些类型以及这些类型的包装类型也是可以的。显然， long 类型不符合 switch 的语法规定，并且不能被隐式转换成 int 类型，所以，它不能作用于 swtich 语句中。String 在 jdk1.7 以后可以使用。 </p><h3 id="6、-short-s1-1-s1-s1-1-有什么错-short-s1-1-s1-1-有什么错"><a href="#6、-short-s1-1-s1-s1-1-有什么错-short-s1-1-s1-1-有什么错" class="headerlink" title="6、      short s1 = 1; s1 = s1 + 1;**有什么错? short s1 = 1; s1 += 1;有什么错?**"></a><strong>6、</strong>      <strong>short s1 = 1; s1 = s1 + 1;**有什么错</strong>? short s1 = 1; s1 += 1;<strong>有什么错</strong>?**</h3><p>对于 short s1 = 1; s1 = s1 + 1;由于 s1+1 运算时会自动提升表达式的类型，所以结果是 int 型，再赋值给 short 类型 s1 时，编译器将报告需要强制转换类型的错误。对于 short s1 = 1; s1 += 1;由于 +=是 java 语言规定的运算符，java 编译器会对它进行特殊处理，因此可以正确编译。 </p><h3 id="7、-char-型变量中能不能存贮一个中文汉字-为什么"><a href="#7、-char-型变量中能不能存贮一个中文汉字-为什么" class="headerlink" title="7、      char 型变量中能不能存贮一个中文汉字**?为什么?**"></a><strong>7、</strong>      <strong>char</strong> 型变量中能不能存贮一个中文汉字**?<strong>为什么</strong>?**</h3><p>char 型变量是用来存储 Unicode 编码的字符的，unicode 编码字符集中包含了汉字，所以，char 型变量中当然可以存储汉字啦。不过，如果某个特殊的汉字没有被包含在 unicode 编码字符集中，那么，这个 char 型变量中就不能存储这个特殊汉字。补充说明：unicode 编码占用两个字节，所以，char 类型的变量也是占用两个字节。 </p><h3 id="8、-用最有效率的方法算出-2-乘以-8-等于几"><a href="#8、-用最有效率的方法算出-2-乘以-8-等于几" class="headerlink" title="8、      用最有效率的方法算出 2 乘以 8 等于几**?**"></a><strong>8、</strong>      用最有效率的方法算出 <strong>2</strong> 乘以 <strong>8</strong> 等于几**?**</h3><p>2 &lt;&lt; 3， </p><h3 id="9、使用-final-关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？"><a href="#9、使用-final-关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？" class="headerlink" title="9、使用 final 关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？"></a><strong>9</strong>、使用 <strong>final</strong> 关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</h3><p>使用 final 关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。 </p><h3 id="10、-”-”和-equals-方法究竟有什么区别？"><a href="#10、-”-”和-equals-方法究竟有什么区别？" class="headerlink" title="10、**”==”和 **equals 方法究竟有什么区别？"></a><strong>10</strong>、**”==”<strong>和 **equals</strong> 方法究竟有什么区别？</h3><p>==操作符专门用来比较两个变量的值是否相等，也就是用于比较变量所对应的内存中所存储的数值是否相同，要比较两个基本类型的数据或两个引用变量是否相等，只能用==操作符。如果一个变量指向的数据是对象类型的，那么，这时候涉及了两块内存，对象本身占用一块内存（堆内存），变量也占用一块内存，例如 Objet obj = newObject();变量 obj 是一个内存，new Object()是另一个内存，此时，变量 obj 所对应的内存中存储的数值就是对象占用的那块内存的首地址。对于指向对象类型的变量，如果要比较两个变量是否指向同一个对象，即要看这两个变量所对应的内存中的数值是否相等，这时候就需要用==操作符进行比较。 </p><p>equals 方法是用于比较两个独立对象的内容是否相同，就好比去比较两个人的长相是否相同，它比较的两个对象是独立的。 </p><h3 id="11、静态变量和实例变量的区别？"><a href="#11、静态变量和实例变量的区别？" class="headerlink" title="11、静态变量和实例变量的区别？"></a><strong>11</strong>、静态变量和实例变量的区别？</h3><p>在语法定义上的区别：静态变量前要加 static 关键字，而实例变量前则不加。在程序运行时的区别：实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。 </p><p>总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。 </p><h3 id="12、是否可以从一个-static-方法内部发出对非-static-方法的调用？"><a href="#12、是否可以从一个-static-方法内部发出对非-static-方法的调用？" class="headerlink" title="12、是否可以从一个 static 方法内部发出对非 static 方法的调用？"></a><strong>12</strong>、是否可以从一个 <strong>static</strong> 方法内部发出对非 <strong>static</strong> 方法的调用？</h3><p>不可以。因为非 static 方法是要与对象关联在一起的，必须创建一个对象后，才可以在该对象上进行方法调用，而 static 方法调用时不需要创建对象，可以直接调用。也就是说，当一个 static 方法被调用时，可能还没有创建任何实例对象，如果从一个 static 方法中发出对非 static 方法的调用，那个非 static 方法是关联到哪个对象上的呢？这个逻辑无法成立，所以，一个 static 方法内部发出对非</p><p>static 方法的调用。 </p><h3 id="13、Integer-与-int-的区别-int-是-java-提供的-8-种原始数据类型之一。"><a href="#13、Integer-与-int-的区别-int-是-java-提供的-8-种原始数据类型之一。" class="headerlink" title="13、Integer 与 int 的区别 int 是 java 提供的 8 种原始数据类型之一。"></a><strong>13</strong>、<strong>Integer</strong> 与 <strong>int</strong> 的区别 <strong>int</strong> 是 <strong>java</strong> 提供的 <strong>8</strong> 种原始数据类型之一。</h3><p>Java 为每个原始类型提供了封装类，Integer 是 java 为 int 提供的封装类。int 的默认值为 0，而 Integer 的默认值为 null，即 Integer 可以区分出未赋值和值为 0 的区别，int 则无法表达出未赋值的情况。例如，要想表达出没有参加考试和考试成绩为 0 的区别，则只能使用 Integer。在 JSP 开发中，Integer 的默认为 null，所以用 el 表达式在文本框中显示时，值为空白字符串，而 int 默认的默认值为 0，所以用 el 表达式在文本框中显示时，结果为 0，所以，int 不适合作为 web 层的表单数据的类型。 </p><p>在 Hibernate 中，如果将 OID 定义为 Integer 类型，那么 Hibernate 就可以根据其值是否为 null 而判断一个对象是否是临时的，如果将 OID 定义为了 int 类型，还需要在 hbm 映射文件中设置其 unsaved-value 属性为 0。 </p><p>另外，Integer 提供了多个与整数相关的操作方法，例如，将一个字符串转换成</p><p>整数，Integer 中还定义了表示整数的最大值和最小值的常量。 </p><h3 id="14、-Math-round-11-5-等于多少-Math-round-11-5-等于多少"><a href="#14、-Math-round-11-5-等于多少-Math-round-11-5-等于多少" class="headerlink" title="14、    Math.round(11.5)**等于多少? Math.round(-11.5)等于多少?**"></a><strong>14、</strong>    <strong>Math.round(11.5)**等于多少</strong>? Math.round(-11.5)<strong>等于多少</strong>?**</h3><p>​        Math 类中提供了三个与取整有关的方法：ceil、floor、round，这些方法的作用与它们的英文名称的含义相对应，例如，ceil 的英文意义是天花板，该方法就表示向上取整，Math.ceil(11.3)的结果为 12,Math.ceil(-11.3)的结果是-11；floor 的英文意义是地板，该方法就表示向下取整， Math.ceil(11.6) 的结果为11,Math.ceil(-11.6)的结果是-12；最难掌握的是 round 方法，它表示“四舍五入”，算法为 Math.floor(x+0.5)，即将原来的数字加上 0.5 后再向下取整，所以，Math.round(11.5)的结果为 12，Math.round(-11.5)的结果为-11。 </p><h3 id="15、-请说出作用域-public，private，protected，以及不写时的区别"><a href="#15、-请说出作用域-public，private，protected，以及不写时的区别" class="headerlink" title="15、    请说出作用域 public，private，protected，以及不写时的区别"></a><strong>15、</strong>    请说出作用域 <strong>public</strong>，<strong>private</strong>，<strong>protected</strong>，以及不写时的区别</h3><p>这四个作用域的可见范围如下表所示。说明：如果在修饰的元素上面没有写任何访问修饰符，则表示 friendly。 </p><table><thead><tr><th>作用域</th><th>当前类</th><th>同一 package</th><th>子类</th><th>其他</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>friendly</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h3 id="16、-String-是最基本的数据类型吗"><a href="#16、-String-是最基本的数据类型吗" class="headerlink" title="16、   String 是最基本的数据类型吗**?**"></a><strong>16、</strong>   <strong>String</strong> 是最基本的数据类型吗**?**</h3><p>基本数据类型包括 byte、int、char、long、float、double、boolean 和 short。 java.lang.String 类是 final 类型的，因此不可以继承这个类、不能修改这</p><p>个类。为了提高效率节省空间，我们应该用 StringBuffer 类 </p><h3 id="17、-String-s-“Hello”-s-s-“-world-”-这两行代码执行后，原始的-String-对象中的内容到底变了没有？"><a href="#17、-String-s-“Hello”-s-s-“-world-”-这两行代码执行后，原始的-String-对象中的内容到底变了没有？" class="headerlink" title="17、    String s = “Hello”;s = s + “ world!”;**这两行代码执行后，原始的 **String 对象中的内容到底变了没有？"></a><strong>17、</strong>    <strong>String s = “Hello”;s = s + “ world!”;**这两行代码执行后，原始的 **String</strong> 对象中的内容到底变了没有？</h3><p>没有。因为 String 被设计成不可变(immutable)类，所以它的所有对象都是不可变对象。在这段代码中，s 原先指向一个 String 对象，内容是 “Hello”，然后我们对 s 进行了+操作，那么 s 所指向的那个对象是否发生了改变呢？答案是没有。这时，s 不指向原来那个对象了，而指向了另一个 String 对象，内容为 “Hello world!”，原来那个对象还存在于内存之中，只是 s 这个引用变量不再指向</p><p>它了。 </p><h3 id="18、-是否可以继承-String-类"><a href="#18、-是否可以继承-String-类" class="headerlink" title="18、    是否可以继承 String 类**?**"></a><strong>18、</strong>    是否可以继承 <strong>String</strong> 类**?**</h3><p>String 类是 final 类故不可以继承。 </p><h3 id="19、-String-s-new-String-“xyz”-创建了几个-String-Object-二者之间有什么区别？"><a href="#19、-String-s-new-String-“xyz”-创建了几个-String-Object-二者之间有什么区别？" class="headerlink" title="19、    **String s = new String(“xyz”);**创建了几个 **String Object?**二者之间有什么区别？"></a><strong>19、</strong>    **String s = new String(“xyz”);**创建了几个 **String Object?**二者之间有什么区别？</h3><p>两个或一个，”xyz”对应一个对象，这个对象放在字符串常量缓冲区，常量”xyz”不管出现多少遍，都是缓冲区中的那一个。New String 每写一遍，就创建一个新的对象，它一句那个常量”xyz”对象的内容来创建出一个新 String 对象。如果以前就用过’xyz’，这句代表就不会创建”xyz”自己了，直接从缓冲区拿。 </p><h3 id="20、、如何把一段逗号分割的字符串转换成一个数组"><a href="#20、、如何把一段逗号分割的字符串转换成一个数组" class="headerlink" title="20、、如何把一段逗号分割的字符串转换成一个数组**?**"></a><strong>20、</strong>、如何把一段逗号分割的字符串转换成一个数组**?**</h3><p>如果不查 jdk api，我很难写出来！我可以说说我的思路： </p><p>1 用正则表达式，代码大概为： </p><p>String [] result = orgStr.split(“,”); </p><p>2 用 StingTokenizer ,代码为： </p><p>StringTokenizer tokener = StringTokenizer(orgStr,”,”); String [] result =new String[tokener.countTokens()]; int i=0; </p><p>while(tokener.hasNext(){ result[i++]=toker.nextToken(); </p><p>}  </p><h3 id="21、数组有没有-length-这个方法-String-有没有-length-这个方法？"><a href="#21、数组有没有-length-这个方法-String-有没有-length-这个方法？" class="headerlink" title="21、数组有没有 length()**这个方法? String** 有没有 **length()**这个方法？"></a><strong>21</strong>、数组有没有 <strong>length()**这个方法</strong>? String** 有没有 **length()**这个方法？</h3><p>数组没有 length()这个方法，有 length 的属性。String 有 length()这个方法。 </p><h3 id="22-、下面这条语句一共创建了多少个对象："><a href="#22-、下面这条语句一共创建了多少个对象：" class="headerlink" title="22 、下面这条语句一共创建了多少个对象："></a><strong>22</strong> 、下面这条语句一共创建了多少个对象：</h3><p><strong>String s=”a”+”b”+”c”+”d”;</strong> </p><p>答：对于如下代码：               </p><p>String s1 = “a”; </p><p>String s2 = s1 + “b”; </p><p>String s3 = “a” + “b”; </p><p>System.out.println(s2 == “ab”); </p><p>System.out.println(s3 == “ab”); </p><p>第一条语句打印的结果为 false，第二条语句打印的结果为 true，这说明 javac 编译可以对字符串常量直接相加的表达式进行优化，不必要等到运行期去进行加法运算处理，而是在编译时去掉其中的加号，直接将其编译成一个这些常量相连的结果。 </p><p>题目中的第一行代码被编译器在编译时优化后，相当于直接定义了一个”abcd”的字符串，所以，上面的代码应该只创建了一个String对象。写如下两行代码，     </p><p> String s =”a” + “b” + “c” + “d”;       System.out.println(s== “abcd”); 最终打印的结果应该为 true。 </p><h3 id="23、-Overload-和-Override-的区别。Overloaded-的方法是否可以改变返回值的类型"><a href="#23、-Overload-和-Override-的区别。Overloaded-的方法是否可以改变返回值的类型" class="headerlink" title="23、    Overload 和 Override 的区别。Overloaded 的方法是否可以改变返回值的类型"></a><strong>23、</strong>    <strong>Overload</strong> 和 <strong>Override</strong> 的区别。<strong>Overloaded</strong> 的方法是否可以改变返回值的类型</h3><p>重载 Overload 表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（即参数个数或类型不同）。 </p><p>重写 Override 表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。 </p><p>在覆盖要注意以下的几点： </p><p>1、覆盖的方法的标志必须要和被覆盖的方法的标志完全匹配，才能达到覆盖的效果； </p><p>2、覆盖的方法的返回值必须和被覆盖的方法的返回一致； </p><p>3、覆盖的方法所抛出的异常必须和被覆盖方法的所抛出的异常一致，或者是其子类； </p><p>4、被覆盖的方法不能为 private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。 </p><p>在使用重载要注意以下的几点： </p><p>1、在使用重载时只能通过不同的参数样式。例如，不同的参数类型，不同的参数个数，不同的参数顺序（当然，同一方法内的几个参数类型必须不一样，例如可以是 fun(int,float)，但是不能为 fun(int,int)）； </p><p>2、不能通过访问权限、返回类型、抛出的异常进行重载； </p><p>3、方法的异常类型和数目不会对重载造成影响； </p><p>4、对于继承来说，如果某一方法在父类中是访问权限是 priavte，那么就不能在子类对其进行重载，如果定义的话，也只是定义了一个新方法，而不会达到重载的效果。 </p><p>如果几个 Overloaded 的方法的参数列表不一样，它们的返回者类型当然也可以不一样。如果两个方法的参数列表完全一样，是否可以让它们的返回值不同来实</p><p>现重载 Overload。这是不行的  </p><h3 id="24、构造器-Constructor-是否可被-override"><a href="#24、构造器-Constructor-是否可被-override" class="headerlink" title="24、构造器 Constructor 是否可被 override?"></a><strong>24</strong>、构造器 <strong>Constructor</strong> 是否可被 <strong>override?</strong></h3><p> 构造器 Constructor 不能被继承，因此不能重写 Override，但可以被重载Overload。 </p><h3 id="25、接口是否可继承接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class-抽象类中是否可以有静态的-main-方法？"><a href="#25、接口是否可继承接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concrete-class-抽象类中是否可以有静态的-main-方法？" class="headerlink" title="25、接口是否可继承接口**?抽象类是否可实现(implements)接口?抽象类是否可继承具体类(concrete class)?抽象类中是否可以有静态的 **main 方法？"></a><strong>25</strong>、接口是否可继承接口**?<strong>抽象类是否可实现</strong>(implements)<strong>接口</strong>?<strong>抽象类是否可继承具体类</strong>(concrete class)?<strong>抽象类中是否可以有静态的 **main</strong> 方法？</h3><p>接口可以继承接口。抽象类可以实现(implements)接口，抽象类是否可继承具体类。抽象类中可以有静态的 main 方法。 </p><p>只有记住抽象类与普通类的唯一区别就是不能创建实例对象和允许有 abstract</p><p>方法。 </p><h3 id="26、写-clone-方法时，通常都有一行代码，是什么？"><a href="#26、写-clone-方法时，通常都有一行代码，是什么？" class="headerlink" title="26、写 **clone()**方法时，通常都有一行代码，是什么？"></a><strong>26</strong>、写 **clone()**方法时，通常都有一行代码，是什么？</h3><p>clone 有缺省行为，super.clone();因为首先要把父类中的成员复制到位，然后才是复制自己的成员。 </p><h3 id="27、面向对象的特征有哪些方面"><a href="#27、面向对象的特征有哪些方面" class="headerlink" title="27、面向对象的特征有哪些方面"></a><strong>27</strong>、面向对象的特征有哪些方面</h3><p>面向对象的编程语言有 4 个主要的特征。 </p><p> 1.封装：封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、低耦合”，防止程序相互依赖性而带来的变动影响。把握一个原则：把对同一事物进行操作的方法和相关的方法放在同一个类中，把方法和它操作的数据放在同一个类中。 </p><p>2.抽象：抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。 </p><p>3.继承：在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在的类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。 </p><p>4.多态：多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。多态性增强了软件的灵活性和扩展性。 </p><h3 id="28、java-中实现多态的机制是什么？"><a href="#28、java-中实现多态的机制是什么？" class="headerlink" title="28、java 中实现多态的机制是什么？"></a><strong>28</strong>、<strong>java</strong> 中实现多态的机制是什么？</h3><p>靠的是父类或接口定义的引用变量可以指向子类或具体实现类的实例对象，而程序调用的方法在运行期才动态绑定，就是引用变量所指向的具体实例对象的方法，也就是内存里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。 </p><h3 id="29、abstract-class-和-interface-有什么区别"><a href="#29、abstract-class-和-interface-有什么区别" class="headerlink" title="29、abstract class 和 interface 有什么区别"></a><strong>29</strong>、<strong>abstract class</strong> 和 <strong>interface</strong> 有什么区别</h3><p> 含有 abstract 修饰符的 class 即为抽象类，abstract 类不能创建的实例对象。含有 abstract 方法的类必须定义为 abstract class，abstract class 类的方法不必是抽象的。abstract class 类中定义抽象方法必须在具体(Concrete)子类中实现，所以，不能有抽象构造方法或抽象静态方法。如果的子类没有实现抽象父类中的所有抽象方法，那么子类也必须定义为 abstract 类型。 </p><p>接口（interface）可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。接口中的方法定义默认为 public abstract 类型，接口中的成员变量类型默认为 public static final。 </p><p>下面比较一下两者的语法区别： </p><p> 1.抽象类可以有构造方法，接口中不能有构造方法。 </p><p> 2.抽象类中可以有普通成员变量，接口中没有普通成员变量 </p><p> 3.抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。 </p><p>\4. 抽象类中的抽象方法的访问类型可以是 public，protected 和（默认类型,虽然 eclipse 下不报错，但应该也不行），但接口中的抽象方法只能是 public 类型的，并且默认即为 public abstract 类型。 </p><p>\5. 抽象类中可以包含静态方法，接口中不能包含静态方法 </p><p>\6. 抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是 public static final 类型并且默认即为 public static final 类型。 </p><p>\7. 一个类可以实现多个接口，但只能继承一个抽象类。 </p><h3 id="30、-abstract-的-method-是否可同时是-static-是否可同时是-native，是否可同时是-synchronized"><a href="#30、-abstract-的-method-是否可同时是-static-是否可同时是-native，是否可同时是-synchronized" class="headerlink" title="30、    abstract 的 method 是否可同时是 static,**是否可同时是 **native，是否可同时是 synchronized?"></a><strong>30、</strong>    <strong>abstract</strong> 的 <strong>method</strong> 是否可同时是 <strong>static,**是否可同时是 **native</strong>，是否可同时是 <strong>synchronized?</strong></h3><p> abstract 的 method 不可以是 static 的，因为抽象的方法是要被子类实现的，而 static 与子类扯不上关系！ native 方法表示该方法要用另外一种依赖平台的编程语言实现的，不存在着被子类实现的问题，所以，它也不能是抽象的，不能与 abstract 混用。 </p><p>关于 synchronized 与 abstract 合用的问题，我觉得也不行，因为在我几年的学习和开发中，从来没见到过这种情况，并且我觉得 synchronized 应该是作用在一个具体的方法上才有意义。而且，方法上的 synchronized 同步所使用的同步</p><p>锁对象是 this，而抽象方法上无法确定 this 是什么。 </p><h3 id="31、-什么是内部类？Static-Nested-Class-和-Inner-Class-的不同。"><a href="#31、-什么是内部类？Static-Nested-Class-和-Inner-Class-的不同。" class="headerlink" title="31、    什么是内部类？Static Nested Class 和 Inner Class 的不同。"></a><strong>31、</strong>    什么是内部类？<strong>Static Nested Class</strong> 和 <strong>Inner Class</strong> 的不同。</h3><p>内部类就是在一个类的内部定义的类，内部类中不能定义静态成员，内部类可以直接访问外部类中的成员变量，内部类可以定义在外部类的方法外面，也可以定义在外部类的方法体中。在方法外部定义的内部类前面可以加上 static 关键字，从而成为 Static Nested Class，它不再具有内部类的特性，所有，从狭义上讲，它不是内部类。Static Nested Class 与普通类在运行时的行为和功能上没有什么区别，只是在编程引用时的语法上有一些差别，它可以定义成 public、protected、默认的、private 等多种类型，而普通类只能定义成 public 和默认的这两种类型。在外面引用 Static Nested Class 类的名称为“外部类名.内部类名”。在外面不需要创建外部类的实例对象，就可以直接创建 Static Nested Class，例如，假设 Inner 是定义在 Outer 类中的 Static Nested Class，那么可以使用如下语句创建 Inner 类： Outer.Inner inner = newOuter.Inner(); 由于 static Nested Class 不依赖于外部类的实例对象，所以，static Nested Class 能访问外部类的非 static 成员变量。当在外部类中访问 Static Nested Class 时，可以直接使用 Static Nested Class 的名字，而不需要加上外部类的名字了，在 Static Nested Class 中也可以直接引用外部类的 static 的成员变量，不需要加上外部类的名字。 </p><p>在静态方法中定义的内部类也是 Static Nested Class，这时候不能在类前面加 static 关键字，静态方法中的 Static Nested Class 与普通方法中的内部类的应用方式很相似，它除了可以直接访问外部类中的 static 的成员变量，还可以访问静</p><p>态方法中的局部变量，但是，该局部变量前必须加 final 修饰符。 </p><h3 id="32、内部类可以引用它的包含类的成员吗？有没有什么限制？"><a href="#32、内部类可以引用它的包含类的成员吗？有没有什么限制？" class="headerlink" title="32、内部类可以引用它的包含类的成员吗？有没有什么限制？"></a><strong>32</strong>、内部类可以引用它的包含类的成员吗？有没有什么限制？</h3><p>完全可以。如果不是静态内部类，那没有什么限制！ </p><p>如果你把静态嵌套类当作内部类的一种特例，那在这种情况下不可以访问外部类的普通成员变量，而只能访问外部类中的静态成员， </p><h3 id="33、-Anonymous-Inner-Class-匿名内部类-是否可以-extends-继承-其它类，是否可以-implements-实现-interface-接口"><a href="#33、-Anonymous-Inner-Class-匿名内部类-是否可以-extends-继承-其它类，是否可以-implements-实现-interface-接口" class="headerlink" title="33、    Anonymous Inner Class (**匿名内部类)是否可以 **extends(**继承)其它类，是否可以 **implements(**实现)interface(接口)?**"></a><strong>33、</strong>    <strong>Anonymous Inner Class (**匿名内部类</strong>)<strong>是否可以 **extends(**继承</strong>)<strong>其它类，是否可以 **implements(**实现</strong>)interface(<strong>接口</strong>)?**</h3><p>可以继承其他类或实现其他接口。不仅是可以，而是必须! </p><h3 id="34、-try-里有一个-return-语句，那么紧跟在这个-try-后的-finally-里的-code-会不会被执行，什么时候被执行，在-return-前还是后"><a href="#34、-try-里有一个-return-语句，那么紧跟在这个-try-后的-finally-里的-code-会不会被执行，什么时候被执行，在-return-前还是后" class="headerlink" title="34、      try {}**里有一个 **return 语句，那么紧跟在这个 try 后的 finally {}**里的 **code 会不会被执行，什么时候被执行，在 return 前还是后**?**"></a><strong>34、</strong>      <strong>try {}**里有一个 **return</strong> 语句，那么紧跟在这个 <strong>try</strong> 后的 <strong>finally {}**里的 **code</strong> 会不会被执行，什么时候被执行，在 <strong>return</strong> 前还是后**?**</h3><p>结论：finally 中的代码比 return 和 break 语句后执行 </p><h3 id="35、-final-finally-finalize-的区别。"><a href="#35、-final-finally-finalize-的区别。" class="headerlink" title="35、      final, finally, finalize 的区别。"></a><strong>35、</strong>      <strong>final, finally, finalize</strong> 的区别。</h3><p>final 用于声明属性，方法和类，分别表示属性不可变，方法不可覆盖，类不可继承。内部类要访问局部变量，局部变量必须定义成 final 类型。 </p><p>finally 是异常处理语句结构的一部分，表示总是执行。 </p><p>finalize 是 Object 类的一个方法，在垃圾收集器执行的时候会调用被回收对象的此方法，可以覆盖此方法提供垃圾收集时的其他资源回收，例如关闭文件等。JVM 不保证此方法总被调用 </p><h3 id="36、运行时异常与一般异常有何异同？"><a href="#36、运行时异常与一般异常有何异同？" class="headerlink" title="36、运行时异常与一般异常有何异同？"></a><strong>36</strong>、运行时异常与一般异常有何异同？</h3><p>异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。java 编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。 </p><h3 id="37、-error-和-exception-有什么区别"><a href="#37、-error-和-exception-有什么区别" class="headerlink" title="37、   error 和 exception 有什么区别**?**"></a><strong>37、</strong>   <strong>error</strong> 和 <strong>exception</strong> 有什么区别**?**</h3><p>error 表示恢复不是不可能但很困难的情况下的一种严重问题。比如说内存溢出。不可能指望程序能处理这样的情况。 exception 表示一种设计或实现问题。也就是说，它表示如果程序运行正常，从不会发生的情况。 </p><h3 id="38、-Java-中的异常处理机制的简单原理和应用。"><a href="#38、-Java-中的异常处理机制的简单原理和应用。" class="headerlink" title="38、   Java 中的异常处理机制的简单原理和应用。"></a><strong>38、</strong>   <strong>Java</strong> 中的异常处理机制的简单原理和应用。</h3><p>异常是指 java 程序运行时（非编译）所发生的非正常情况或错误。Java 对异常进行了分类，不同类型的异常分别用不同的 Java 类表示，所有异常的根类为</p><p>java.lang.Throwable，Throwable 下面又派生了两个子类：Error 和 Exception，</p><p>Error 表示应用程序本身无法克服和恢复的一种严重问题，程序只有死的份了，例如，说内存溢出和线程死锁等系统问题。Exception 表示程序还能够克服和恢复的问题，其中又分为系统异常和普通异常，系统异常是软件本身缺陷所导致的问题，也就是软件开发人员考虑不周所导致的问题，软件使用者无法克服和恢复这种问题，但在这种问下还可以让软件系统继续运行或者让软件死掉，例如，数组脚本越界（ ArrayIndexOutOfBoundsException ），空指针异（NullPointerException）、类转换异常（ClassCastException）；普通异常是运行环境的变化或异常所导致的问题，是用户能够克服的问题，例如，网络断线，硬盘空间不够，发生这样的异常后，程序不应该死掉。 java 为系统异常和普通异常提供了不同的解决方案，编译器强制普通异常必须 try..catch 处理或用 throws 声明继续抛给上层调用方法处理，所以普通异常也称为 checked 异常，而系统异常可以处理也可以不处理，所以，编译器不强制用 try..catch 处理或用 throws 声明，所以系统异常也称为 unchecked 异常。 </p><h3 id="39、-请写出你最常见到的-5-个-runtime-exception。"><a href="#39、-请写出你最常见到的-5-个-runtime-exception。" class="headerlink" title="39、   请写出你最常见到的 5 个 runtime exception。"></a><strong>39、</strong>   请写出你最常见到的 <strong>5</strong> 个 <strong>runtime exception</strong>。</h3><p>所谓系统异常，就是…..，它们都是 RuntimeException 的子类，在 jdk doc 中查 RuntimeException 类，就可以看到其所有的子类列表，也就是看到了所有的系统异常。我比较有印象的系统异常有：  </p><p> <strong>NullPointerException</strong> <strong>空指针异常</strong></p><p><strong>ArithmeticException</strong> <strong>数学计算异常</strong></p><p><strong>ArrayIndexOutOfBoundsException</strong> <strong>下标越界异常</strong></p><p><strong>NegativeArraySizeException</strong> <strong>负数组长度异常</strong></p><p><strong>ClassNotFoundException</strong> <strong>类未找到异常</strong></p><p><strong>ClassCastException</strong> <strong>造型异常</strong></p><h3 id="40、-sleep-和-wait-有什么区别"><a href="#40、-sleep-和-wait-有什么区别" class="headerlink" title="40、    **sleep()**和 **wait()**有什么区别"></a><strong>40、</strong>    **sleep()**和 **wait()**有什么区别</h3><p>（网上的答案：sleep 是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用 sleep 不会释放对象锁。 wait 是 Object 类的方法，对此对象调用 wait 方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出 notify 方法（或 notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。） </p><h3 id="41、-同步和异步有何异同，在什么情况下分别使用他们？举例说明。"><a href="#41、-同步和异步有何异同，在什么情况下分别使用他们？举例说明。" class="headerlink" title="41、    同步和异步有何异同，在什么情况下分别使用他们？举例说明。"></a><strong>41、</strong>    同步和异步有何异同，在什么情况下分别使用他们？举例说明。</h3><p>如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。 </p><p>当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步编程，在很多情况下采用异步途径往往更有效率。 </p><h3 id="42、-多线程有几种实现方法-同步有几种实现方法"><a href="#42、-多线程有几种实现方法-同步有几种实现方法" class="headerlink" title="42、    多线程有几种实现方法**?同步有几种实现方法?**"></a><strong>42、</strong>    多线程有几种实现方法**?<strong>同步有几种实现方法</strong>?**</h3><p>多线程有两种实现方法，分别是继承 Thread 类与实现 Runnable 接口 </p><p>同步的实现方面有两种，分别是 synchronized,wait 与 notify wait():使一个线程处于等待状态，并且释放所持有的对象的 lock。 sleep():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉 InterruptedException 异常。 notify():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由 JVM 确定唤醒哪个线程，而且不是按优先级。 Allnotity():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争 </p><h3 id="43、-启动一个线程是用-run-还是-start"><a href="#43、-启动一个线程是用-run-还是-start" class="headerlink" title="43、    启动一个线程是用 run()**还是 **start()?"></a><strong>43、</strong>    启动一个线程是用 <strong>run()**还是 **start()?</strong></h3><p> 启动一个线程是调用 start()方法，使线程就绪状态，以后可以被调度为运行状态，一个线程必须关联一些具体的执行代码，run()方法是该线程所关联的执行代码。 </p><h3 id="44、-当一个线程进入一个对象的一个-synchronized-方法后，其它线程是否可进入此对象的其它方法"><a href="#44、-当一个线程进入一个对象的一个-synchronized-方法后，其它线程是否可进入此对象的其它方法" class="headerlink" title="44、    当一个线程进入一个对象的一个 synchronized 方法后，其它线程是否可进入此对象的其它方法**?**"></a><strong>44、</strong>    当一个线程进入一个对象的一个 <strong>synchronized</strong> 方法后，其它线程是否可进入此对象的其它方法**?**</h3><p>分几种情况： </p><p>   1.其他方法前是否加了 synchronized 关键字，如果没加，则能。 </p><p>   2.如果这个方法内部调用了 wait，则可以进入其他 synchronized 方法。 </p><p>   3.如果其他个方法都加了 synchronized 关键字，并且内部没有调用 wait，则不能。 </p><p>   4.如果其他方法是 static，它用的同步锁是当前类的字节码，与非静态的方法不能同步，因为非静态的方法用的是 this。 </p><h3 id="45、-简述-synchronized-和-java-util-concurrent-locks-Lock-的异同？"><a href="#45、-简述-synchronized-和-java-util-concurrent-locks-Lock-的异同？" class="headerlink" title="45、    简述 synchronized 和 java.util.concurrent.locks.Lock 的异同？"></a><strong>45、</strong>    简述 <strong>synchronized</strong> 和 <strong>java.util.concurrent.locks.Lock</strong> 的异同？</h3><p>主要相同点：Lock 能完成 synchronized 所实现的所有功能 </p><p>主要不同点：Lock 有比 synchronized 更精确的线程语义和更好的性能。 synchronized 会自动释放锁，而 Lock 一定要求程序员手工释放，并且必须在 finally 从句中释放。Lock 还有更强大的功能，例如，它的 tryLock 方法可以非阻塞方式去拿锁。 </p><h3 id="46、-ArrayList-和-Vector-的区别"><a href="#46、-ArrayList-和-Vector-的区别" class="headerlink" title="46、    ArrayList 和 Vector 的区别"></a><strong>46、</strong>    <strong>ArrayList</strong> 和 <strong>Vector</strong> 的区别</h3><p>答：这两个类都实现了 List 接口（List 接口继承了 Collection 接口），他们都是有序集合，即存储在这两个集合中的元素的位置都是有顺序的，相当于一种动态的数组，我们以后可以按位置索引号取出某个元素，，并且其中的数据是允许重复的，这是 HashSet 之类的集合的最大不同处，HashSet 之类的集合不可以按索引号去检索其中的元素，也不允许有重复的元素（本来题目问的与 hashset 没有任何关系，但为了说清楚 ArrayList 与 Vector 的功能，我们使用对比方式，更有利于说明问题）。 </p><p>接着才说 ArrayList 与 Vector 的区别，这主要包括两个方面：. </p><p>（1）同步性： </p><p>​    Vector 是线程安全的，也就是说是它的方法之间是线程同步的，而 ArrayList 是线程序不安全的，它的方法之间是线程不同步的。如果只有一个线程会访问到集合，那最好是使用 ArrayList，因为它不考虑线程安全，效率会高些；如果有多个线程会访问到集合，那最好是使用 Vector，因为不需要我们自己再去考虑和编写线程安全的代码。 </p><p>备注：对于 Vector&amp;ArrayList、Hashtable&amp;HashMap，要记住线程安全的问题，记住 Vector 与 Hashtable 是旧的，是 java 一诞生就提供了的，它们是线程安全的，ArrayList 与 HashMap 是 java2 时才提供的，它们是线程不安全的。所以，我们讲课时先讲老的。 </p><p>（2）数据增长： </p><p>​    ArrayList 与 Vector 都有一个初始的容量大小，当存储进它们里面的元素的个数超过了容量时，就需要增加 ArrayList 与 Vector 的存储空间，每次要增加存储空间时，不是只增加一个存储单元，而是增加多个存储单元，每次增加的存储单元的个数在内存空间利用与程序效率之间要取得一定的平衡。Vector 默认增长为原来两倍，而 ArrayList 的增长策略在文档中没有明确规定（从源代码看到的是增长为原来的 1.5 倍）。ArrayList 与 Vector 都可以设置初始的空间大小，</p><p>Vector 还可以设置增长的空间大小，而 ArrayList 没有提供设置增长空间的方法。 </p><p>总结：即 Vector 增长原来的一倍，ArrayList 增加原来的 0.5 倍。 </p><h3 id="47、HashMap-和-Hashtable-的区别"><a href="#47、HashMap-和-Hashtable-的区别" class="headerlink" title="47、HashMap 和 Hashtable 的区别"></a><strong>47</strong>、<strong>HashMap</strong> 和 <strong>Hashtable</strong> 的区别</h3><p>（条理上还需要整理，也是先说相同点，再说不同点） HashMap 是 Hashtable 的轻量级实现（非线程安全的实现），他们都完成了 Map </p><p>接口，主要区别在于 HashMap 允许空（null）键值（key）,由于非线程安全，在只有一个线程访问的情况下，效率要高于 Hashtable HashMap 允许将 null 作为一个 entry 的 key 或者 value，而 Hashtable 不允许。 HashMap 把 Hashtable 的 contains 方法去掉了，改成 containsvalue 和 containsKey。因为 contains 方法容易让人引起误解。 Hashtable 继承自 Dictionary 类，而 HashMap 是 Java1.2 引进的 Map interface 的一个实现。 </p><p>最大的不同是，Hashtable 的方法是 Synchronize 的，而 HashMap 不是，在多个线程访问 Hashtable 时，不需要自己为它的方法实现同步，而 HashMap 就必须为之提供外同步。 Hashtable 和 HashMap 采用的 hash/rehash 算法都大概一样，所以性能不会有很大的差异。就 HashMap 与 HashTable 主要从三方面来说。 </p><p>一.历史原因:Hashtable 是基于陈旧的 Dictionary 类的，HashMap 是 Java 1.2 引进的 Map 接口的一个实现 </p><p>二.同步性:Hashtable 是线程安全的，也就是说是同步的，而 HashMap 是线程序不安全的，不是同步的 </p><p>三.值：只有 HashMap 可以让你将空值作为一个表的条目的 key 或 value </p><h3 id="48、-List-和-Map-区别"><a href="#48、-List-和-Map-区别" class="headerlink" title="48、    List 和 Map 区别**?**"></a><strong>48、</strong>    <strong>List</strong> 和 <strong>Map</strong> 区别**?**</h3><p>一个是存储单列数据的集合，另一个是存储键和值这样的双列数据的集合，List 中存储的数据是有顺序，并且允许重复；Map 中存储的数据是没有顺序的，其键是不能重复的，它的值是可以有重复的。 </p><h3 id="49、-说出-ArrayList-Vector-LinkedList-的存储性能和特性"><a href="#49、-说出-ArrayList-Vector-LinkedList-的存储性能和特性" class="headerlink" title="49、    说出 ArrayList,Vector, LinkedList 的存储性能和特性"></a><strong>49、</strong>    说出 <strong>ArrayList,Vector, LinkedList</strong> 的存储性能和特性</h3><p>ArrayList 和 Vector 都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector 由于使用了 synchronized 方法（线程安全），通常性能上较 ArrayList 差，而 LinkedList 使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。LinkedList 也是线程不安全的，LinkedList 提供了一些方法，使得 LinkedList 可以被当作堆栈和队列来使用。 </p><h3 id="50、-Set-里的元素是不能重复的，那么用什么方法来区分重复与否呢-是用-还是-equals-它们有何区别"><a href="#50、-Set-里的元素是不能重复的，那么用什么方法来区分重复与否呢-是用-还是-equals-它们有何区别" class="headerlink" title="50、    Set 里的元素是不能重复的，那么用什么方法来区分重复与否呢**?是用==还是 **equals()?**它们有何区别?**"></a><strong>50、</strong>    <strong>Set</strong> 里的元素是不能重复的，那么用什么方法来区分重复与否呢**?<strong>是用</strong>==<strong>还是 **equals()?**它们有何区别</strong>?**</h3><p>Set 里的元素是不能重复的，元素重复与否是使用 equals()方法进行判断的。 equals()和==方法决定引用值是否指向同一对象 equals()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值 </p><h3 id="51、-两个对象值相同-x-equals-y-true-，但却可有不同的-hash-code，这句话对不对"><a href="#51、-两个对象值相同-x-equals-y-true-，但却可有不同的-hash-code，这句话对不对" class="headerlink" title="51、    两个对象值相同**(x.equals(y) == true)，但却可有不同的 **hash code，这句话对不对**?**"></a><strong>51、</strong>    两个对象值相同**(x.equals(y) == true)<strong>，但却可有不同的 **hash code</strong>，这句话对不对**?**</h3><p>对。如果对象要保存在 HashSet 或 HashMap 中，它们的 equals 相等，那么，它们的 hashcode 值就必须相等。如果不是要保存在 HashSet 或 HashMap，则与 hashcode 没有什么关系了，这时候 hashcode 不等是可以的，例如 arrayList 存储的对象就不用实现 hashcode，当然，我们没有理由不实现，通常都会去实现的。 </p><h3 id="52、java-中有几种类型的流？JDK-为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？"><a href="#52、java-中有几种类型的流？JDK-为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？" class="headerlink" title="52、java 中有几种类型的流？JDK 为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？"></a><strong>52</strong>、<strong>java</strong> 中有几种类型的流？<strong>JDK</strong> 为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？</h3><p>字节流，字符流。字节流继承于 InputStream OutputStream，字符流继承于 InputStreamReaderOutputStreamWriter。在 java.io 包中还有许多其他的流，主要是为了提高性能和使用方便。 </p><h3 id="53、字节流与字符流的区别"><a href="#53、字节流与字符流的区别" class="headerlink" title="53、字节流与字符流的区别"></a><strong>53</strong>、字节流与字符流的区别</h3><p>要把一片二进制数据数据逐一输出到某个设备中，或者从某个设备中逐一读取一片二进制数据，不管输入输出设备是什么，我们要用统一的方式来完成这些操作，用一种抽象的方式进行描述，这个抽象描述方式起名为 IO </p><p>流，对应的抽象类为 OutputStream 和 InputStream，不同的实现类就代表不同输入和输出设备，它们都是针对字节进行操作的。 </p><p>在应用中，经常要完全是字符的一段文本输出去或读进来，用字节流可以吗？计算机中的一切最终都是二进制的字节形式存在。对于“中国”这些字符，首先要得到其对应的字节，然后将字节写入到输出流。读取时，首先读到的是字节，可是我们要把它显示为字符，我们需要将字节转换成字符。由于这样的需求很广泛，人家专门提供了字符流的包装类。 </p><p>底层设备永远只接受字节数据，有时候要写字符串到底层设备，需要将字符串转成字节再进行写入。字符流是字节流的包装，字符流则是直接接受字符串，它内部将串转成字节，再写入底层设备，这为我们向 IO 设别写入或读取字符串提供了一点点方便。 </p><h3 id="54、什么是-java-序列化，如何实现-java-序列化？或者请解释"><a href="#54、什么是-java-序列化，如何实现-java-序列化？或者请解释" class="headerlink" title="54、什么是 java 序列化，如何实现 java 序列化？或者请解释"></a><strong>54</strong>、什么是 <strong>java</strong> 序列化，如何实现 <strong>java</strong> 序列化？或者请解释</h3><p><strong>Serializable</strong> 接口的作用。 </p><p>我们有时候将一个 java 对象变成字节流的形式传出去或者从一个字节流中恢复成一个 java 对象，例如，要将 java 对象存储到硬盘或者传送给网络上的其他计算机，这个过程我们可以自己写代码去把一个 java 对象变成某个格式的字节流再传输，但是，jre 本身就提供了这种支持，我们可以调用 OutputStream 的 writeObject 方法来做，如果要让 java 帮我们做，要被传输的对象必须实现 serializable 接口，这样，javac 编译时就会进行特殊处理，编译的类才可以被 writeObject 方法操作，这就是所谓的序列化。需要被序列化的类必须实现 Serializable 接口，该接口是一个 mini 接口，其中没有需要实现的方法， implementsSerializable 只是为了标注该对象是可被序列化的。 </p><p>例如，在 web 开发中，如果对象被保存在了 Session 中，tomcat 在重启时要把 Session 对象序列化到硬盘，这个对象就必须实现 Serializable 接口。如果对象要经过分布式系统进行网络传输或通过 rmi 等远程调用，这就需要在网络上传输对象，被传输的对象就必须实现 Serializable 接口。 </p><h3 id="55、-GC-是什么-为什么要有-GC"><a href="#55、-GC-是什么-为什么要有-GC" class="headerlink" title="55、    GC 是什么**?为什么要有 **GC?"></a><strong>55、</strong>    <strong>GC</strong> 是什么**?<strong>为什么要有 **GC?</strong></h3><p>GC 是垃圾收集的意思（Gabage Collection）,内存处理是编程人员容易出现问题的地方，忘记或者错误的内存回收会导致程序或系统的不稳定甚至崩溃，Java 提供的 GC 功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，Java 语言没有提供释放已分配内存的显示操作方法。 </p><h3 id="56、-垃圾回收的优点和原理。并考虑-2-种回收机制。"><a href="#56、-垃圾回收的优点和原理。并考虑-2-种回收机制。" class="headerlink" title="56、    垃圾回收的优点和原理。并考虑 2 种回收机制。"></a><strong>56、</strong>    垃圾回收的优点和原理。并考虑 <strong>2</strong> 种回收机制。</h3><p>Java 语言中一个显著的特点就是引入了垃圾回收机制，使 c++程序员最头疼的内存管理的问题迎刃而解，它使得 Java 程序员在编写程序的时候不再需要考虑内存管理。由于有个垃圾回收机制，Java 中的对象不再有”作用域”的概念，只有对象的引用才有”作用域”。垃圾回收可以有效的防止内存泄露，有效的使用可以使用的内存。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡的或者长时间没有使用的对象进行清楚和回收，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收。回收机制有分代复制垃圾回收和标记垃圾回收，增量垃圾回收。 </p><h3 id="57、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？"><a href="#57、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？" class="headerlink" title="57、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？"></a><strong>57</strong>、垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？</h3><p>对于 GC 来说，当程序员创建对象时，GC 就开始监控这个对象的地址、大小以及使用情况。通常，GC 采用有向图的方式记录和管理堆(heap)中的所有对象。通过这种方式确定哪些对象是”可达的”，哪些对象是”不可达的”。当 GC 确定一些对象为”不可达”时，GC 就有责任回收这些内存空间。可以。程序员可以手动执行 System.gc()，通知 GC 运行，但是 Java 语言规范并不保证 GC 一定会执行。 </p><h3 id="58、-能不能自己写个类，也叫-java-lang-String"><a href="#58、-能不能自己写个类，也叫-java-lang-String" class="headerlink" title="58、    能不能自己写个类，也叫 java.lang.String"></a><strong>58、</strong>    能不能自己写个类，也叫 <strong>java.lang.String</strong></h3><p>​        可以，但在应用的时候，需要用自己的类加载器去加载，否则，系统的类加载器永远只是去加载 jre.jar 包中的那个 java.lang.String。由于在 tomcat 的 web 应用程序中，都是由 webapp 自己的类加载器先自己加载 WEB-INF/classess 目录中的类，然后才委托上级的类加载器加载，如果我们在 tomcat 的 web 应用程序中写一个 java.lang.String，这时候 Servlet 程序加载的就是我们自己写的 java.lang.String ，但是这么干就会出很多潜在的问题，原来所有用了 java.lang.String 类的都将出现问题。 </p><h3 id="59、-java-中会存在内存泄漏吗，请简单描述。"><a href="#59、-java-中会存在内存泄漏吗，请简单描述。" class="headerlink" title="59、    java 中会存在内存泄漏吗，请简单描述。"></a><strong>59、</strong>    <strong>java</strong> 中会存在内存泄漏吗，请简单描述。</h3><p>所谓内存泄露就是指一个不再被程序使用的对象或变量一直被占据在内存中。 java 中有垃圾回收机制，它可以保证一对象不再被引用的时候，即对象编程了孤儿的时候，对象将自动被垃圾回收器从内存中清除掉。由于 Java 使用有向图的方式进行垃圾回收管理，可以消除引用循环的问题，例如有两个对象，相互引用，只要它们和根进程不可达的，那么 GC 也是可以回收它们的 </p>]]></content>
      
      
      
        <tags>
            
            <tag> java面试题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
